// <auto-generated />
using System;
using ACUnified.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ACUnified.Portal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ACUnified.Data.Models.AcademicQualification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Choice1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Choice2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExamNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ExamNumber1")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ExamType1")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Modeofentry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondgrade1")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondgrade2")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondgrade3")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondgrade4")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondgrade5")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondsubject1")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondsubject2")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondsubject3")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondsubject4")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Secondsubject5")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMERegNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("UTMEScore")
                        .HasColumnType("int");

                    b.Property<string>("UTMESubject1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubject2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubject3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubject4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("UTMESubscore1")
                        .HasColumnType("int");

                    b.Property<int>("UTMESubscore2")
                        .HasColumnType("int");

                    b.Property<int>("UTMESubscore3")
                        .HasColumnType("int");

                    b.Property<int>("UTMESubscore4")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("AcademicQualification");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicantPayCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInstallmental")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentLevelId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPayDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentLevelId");

                    b.ToTable("ApplicantPayCategory");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicantPayDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ApplicantPayCategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isForCourseRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("partAllowed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantPayCategoryId");

                    b.ToTable("ApplicantPayDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicantPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("ApplicantPayCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicantPayDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("longtext");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<string>("StaffNo")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("client_code")
                        .HasColumnType("longtext");

                    b.Property<string>("client_name")
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<string>("full_name")
                        .HasColumnType("longtext");

                    b.Property<bool>("isSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("matricNo")
                        .HasColumnType("longtext");

                    b.Property<string>("pay_items")
                        .HasColumnType("longtext");

                    b.Property<string>("pay_response")
                        .HasColumnType("longtext");

                    b.Property<string>("policy")
                        .HasColumnType("longtext");

                    b.Property<string>("redirect_url")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_id")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_name")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_ref")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_status")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantPayCategoryId");

                    b.HasIndex("ApplicantPayDetailsId");

                    b.HasIndex("SemesterId");

                    b.ToTable("ApplicantPayment");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicationDocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("filepath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("ApplicationDocument");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AcademicQualificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicantStage")
                        .HasColumnType("int");

                    b.Property<long?>("ApplicationDocument1ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument2ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument3ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument4ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument5ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument6ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument7ID")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationPaymentReference")
                        .HasColumnType("longtext");

                    b.Property<string>("ApprovedCourse")
                        .HasColumnType("longtext");

                    b.Property<long?>("BioDataId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DecisionComment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormRefNo")
                        .HasColumnType("longtext");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NextOfKinId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherDetailsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramChoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicQualificationId");

                    b.HasIndex("ApplicationDocument1ID");

                    b.HasIndex("ApplicationDocument2ID");

                    b.HasIndex("ApplicationDocument3ID");

                    b.HasIndex("ApplicationDocument4ID");

                    b.HasIndex("ApplicationDocument5ID");

                    b.HasIndex("ApplicationDocument6ID");

                    b.HasIndex("ApplicationDocument7ID");

                    b.HasIndex("BioDataId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("NextOfKinId");

                    b.HasIndex("OtherDetailsId");

                    b.HasIndex("ProgramChoiceId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationForm");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InstitutionProviderId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionProviderId");

                    b.ToTable("ApplicationProgram");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ACUNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AuthenticationStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentApplicationStage")
                        .HasColumnType("int");

                    b.Property<int>("CurrentUserType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MatricNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Othername")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Session")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UWPId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ACUnified.Data.Models.BioData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FormRefNo")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OtherName")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SessionId");

                    b.ToTable("BioData");
                });

            modelBuilder.Entity("ACUnified.Data.Models.CompanyInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CourseUnit")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InstitutionProviderId")
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prerequisite")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("courseCategory")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("LevelId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("ACUnified.Data.Models.CourseRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProgramSetupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentEnrolmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("ProgramSetupId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentEnrolmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseRegistration");
                });

            modelBuilder.Entity("ACUnified.Data.Models.DebtorsList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PaymentPlan")
                        .HasColumnType("int");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("DebtorsList");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Degree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstitutionProviderId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionProviderId");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacultyId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<int>("LevelLimit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("InstitutionProviderId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Designation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("ACUnified.Data.Models.EducationalRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("EducationalRecord");
                });

            modelBuilder.Entity("ACUnified.Data.Models.EmploymentRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationFormId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("HStudentMasterRecordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("StudentMasterRecordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("HStudentMasterRecordId");

                    b.HasIndex("StudentMasterRecordId");

                    b.ToTable("EmploymentRecord");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("InstitutionProviderId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionProviderId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("CaptureStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("DateCaptured")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FingerUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGraduate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Matric")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("ProgramSetupId")
                        .HasColumnType("bigint");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("StudentEntryMode")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserImage")
                        .HasColumnType("longtext");

                    b.Property<int>("YearOfEntry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ProgramSetupId");

                    b.HasIndex("SessionId");

                    b.ToTable("HStudent");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentAcademicQualification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Choice1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Choice2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExamNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Modeofentry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMERegNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMEScore")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubject1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubject2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMESubject3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMESubject4")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMESubscore1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubscore2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubscore3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubscore4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("HStudentAcademicQualification");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentApplicationDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicationDocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("filepath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("HStudentApplicationDocument");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentMasterRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicantStage")
                        .HasColumnType("int");

                    b.Property<long?>("ApplicationDocument1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument2Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument3Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument4Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument5Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument6Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument7Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationPaymentReference")
                        .HasColumnType("longtext");

                    b.Property<string>("ApprovedCourse")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DecisionComment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormRefNo")
                        .HasColumnType("longtext");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramChoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentAcademicQualificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument2Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument3ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument4Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument5Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument6Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument7Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentNextOfKinId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentOtherDetailsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationDocument1Id");

                    b.HasIndex("ApplicationDocument2Id");

                    b.HasIndex("ApplicationDocument3Id");

                    b.HasIndex("ApplicationDocument4Id");

                    b.HasIndex("ApplicationDocument5Id");

                    b.HasIndex("ApplicationDocument6Id");

                    b.HasIndex("ApplicationDocument7Id");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("ProgramChoiceId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentAcademicQualificationId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentNextOfKinId");

                    b.HasIndex("StudentOtherDetailsId");

                    b.HasIndex("UserId");

                    b.ToTable("HStudentMasterRecord");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentNextOfKin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("HStudentNextOfKin");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentOtherDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FatherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MotherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ParentEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("RedAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("HStudentOtherDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("MatricNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("SemesterGPA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("StudentId");

                    b.ToTable("HStudentResult");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HealthAppointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("HealthAppointment");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HostelAllocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HostelDuration")
                        .HasColumnType("int");

                    b.Property<long>("HostelRoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("HostelAllocation");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HostelBuilding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TotalRooms")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("HostelBuilding");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HostelRooms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("HostelBuildingId")
                        .HasColumnType("bigint");

                    b.Property<int>("OccupancyStatus")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HostelBuildingId");

                    b.ToTable("HostelRooms");
                });

            modelBuilder.Entity("ACUnified.Data.Models.InstitutionProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.LGA", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("LGA");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("ACUnified.Data.Models.NextOfKin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("NextOfKin");
                });

            modelBuilder.Entity("ACUnified.Data.Models.OtherDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Disability")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Disabilitycomment")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FatherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MotherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ParentEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("RedAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("OtherDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PayInstalment1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment4")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("PayUploadCategoryBatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramSetupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentLevelId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPayDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("entryMode")
                        .HasColumnType("int");

                    b.Property<int>("payCategoryType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("PayUploadCategoryBatchId");

                    b.HasIndex("ProgramSetupId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentLevelId");

                    b.ToTable("PayCategory");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayConcession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PayConcessionType")
                        .HasColumnType("int");

                    b.Property<long?>("PayUploadCategoryBatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PayUploadCategoryBatchId");

                    b.HasIndex("StudentId");

                    b.ToTable("PayConcession");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("ConcessionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsForCourseRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("PartAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("PayCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PayConcessionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PayInstalment1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment4")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("PayUploadCategoryBatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isLateFee")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PayCategoryId");

                    b.HasIndex("PayConcessionId");

                    b.HasIndex("PayUploadCategoryBatchId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("PayDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PayInstalment1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment4")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("PayUploadCategoryBatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramSetupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentLevelId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPayDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("entryMode")
                        .HasColumnType("int");

                    b.Property<int>("payCategoryType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("PayUploadCategoryBatchId");

                    b.HasIndex("ProgramSetupId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentLevelId");

                    b.ToTable("PayUploadCategory");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadCategoryBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FeeGenerationStatus")
                        .HasColumnType("int");

                    b.Property<int>("FeeUploadStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PayUploadCategoryBatch");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadConcession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PayConcessionType")
                        .HasColumnType("int");

                    b.Property<long?>("PayUploadCategoryBatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PayUploadCategoryBatchId");

                    b.HasIndex("StudentId");

                    b.ToTable("PayUploadConcession");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("ConcessionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsForCourseRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("PartAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PayInstalment1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayInstalment4")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("PayUploadCategoryBatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PayUploadCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PayUploadConcessionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProformaPayPlan")
                        .HasColumnType("int");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isLateFee")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PayUploadCategoryBatchId");

                    b.HasIndex("PayUploadCategoryId");

                    b.HasIndex("PayUploadConcessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("PayUploadDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("PayCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PayDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<int>("ProformaPayPlan")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("longtext");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<string>("StaffNo")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("client_code")
                        .HasColumnType("longtext");

                    b.Property<string>("client_name")
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<string>("full_name")
                        .HasColumnType("longtext");

                    b.Property<bool>("isSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("matricNo")
                        .HasColumnType("longtext");

                    b.Property<string>("pay_items")
                        .HasColumnType("longtext");

                    b.Property<string>("pay_response")
                        .HasColumnType("longtext");

                    b.Property<string>("policy")
                        .HasColumnType("longtext");

                    b.Property<string>("redirect_url")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_id")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_name")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_ref")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_status")
                        .HasColumnType("longtext");

                    b.Property<string>("tran_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PayCategoryId");

                    b.HasIndex("PayDetailsId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ProgramChoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("ProgramChoice");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ProgramSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CourseRegMaxLimit")
                        .HasColumnType("int");

                    b.Property<int>("CourseRegMinLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quota")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("InstitutionProviderId");

                    b.ToTable("ProgramSetup");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Reference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Designation2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Designation3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FullName3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Residential")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Residential2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Residential3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Semester", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("SemesterType")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isLate")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("isActive")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("ACUnified.Data.Models.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CaptureStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateCaptured")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FingerUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsGraduate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LGA")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Matric")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MigrationStatus")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("StudentEntryMode")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserImage")
                        .HasColumnType("longtext");

                    b.Property<int?>("YearOfEntry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("InstitutionProviderId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentAcademicQualification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Choice1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Choice2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExamNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Modeofentry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Subject5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMERegNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMEScore")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubject1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubject2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMESubject3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMESubject4")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UTMESubscore1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubscore2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubscore3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UTMESubscore4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAcademicQualification");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentApplicationDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicationDocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("filepath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentApplicationDocument");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentEnrolment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProgramSetupId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ProgramSetupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEnrolment");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentMasterRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicantStage")
                        .HasColumnType("int");

                    b.Property<long?>("ApplicationDocument1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument2Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument3Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument4Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument5Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument6Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationDocument7Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationPaymentReference")
                        .HasColumnType("longtext");

                    b.Property<string>("ApprovedCourse")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DecisionComment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormRefNo")
                        .HasColumnType("longtext");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramChoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentAcademicQualificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument2Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument3ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument4Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument5Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument6Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentApplicationDocument7Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentNextOfKinId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentOtherDetailsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationDocument1Id");

                    b.HasIndex("ApplicationDocument2Id");

                    b.HasIndex("ApplicationDocument3Id");

                    b.HasIndex("ApplicationDocument4Id");

                    b.HasIndex("ApplicationDocument5Id");

                    b.HasIndex("ApplicationDocument6Id");

                    b.HasIndex("ApplicationDocument7Id");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("ProgramChoiceId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentAcademicQualificationId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentNextOfKinId");

                    b.HasIndex("StudentOtherDetailsId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentMasterRecord");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentNextOfKin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("StudentNextOfKin");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentOtherDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FatherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MotherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ParentEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("RedAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentOtherDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal?>("CA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Exam")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Grade")
                        .HasColumnType("longtext");

                    b.Property<long?>("InstitutionProviderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("MatricNo")
                        .HasColumnType("longtext");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedById")
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ProcessorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ResultStatus")
                        .HasColumnType("int");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstitutionProviderId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ProcessedById");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentResult");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentResultUpload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ACUNo")
                        .HasColumnType("longtext");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ResultProcessStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("SemesterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SessionId");

                    b.ToTable("StudentResultUpload");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("ACUnified.Data.Models.SubjectSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SubjectSetup");
                });

            modelBuilder.Entity("ACUnified.Data.Models.UTMESubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("UTMESubject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicantPayCategory", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("ACUnified.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.Level", "StudentLevel")
                        .WithMany()
                        .HasForeignKey("StudentLevelId");

                    b.Navigation("Degree");

                    b.Navigation("Department");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("Session");

                    b.Navigation("StudentLevel");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicantPayDetails", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicantPayCategory", "ApplicantPayCategory")
                        .WithMany()
                        .HasForeignKey("ApplicantPayCategoryId");

                    b.Navigation("ApplicantPayCategory");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicantPayment", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicantPayCategory", "ApplicantPayCategory")
                        .WithMany()
                        .HasForeignKey("ApplicantPayCategoryId");

                    b.HasOne("ACUnified.Data.Models.ApplicantPayDetails", "ApplicantPayDetails")
                        .WithMany()
                        .HasForeignKey("ApplicantPayDetailsId");

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.Navigation("ApplicantPayCategory");

                    b.Navigation("ApplicantPayDetails");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationDocument", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationForm", b =>
                {
                    b.HasOne("ACUnified.Data.Models.AcademicQualification", "AcademicQualification")
                        .WithMany()
                        .HasForeignKey("AcademicQualificationId");

                    b.HasOne("ACUnified.Data.Models.ApplicationDocument", "ApplicationDocument1")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument1ID");

                    b.HasOne("ACUnified.Data.Models.ApplicationDocument", "ApplicationDocument2")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument2ID");

                    b.HasOne("ACUnified.Data.Models.ApplicationDocument", "ApplicationDocument3")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument3ID");

                    b.HasOne("ACUnified.Data.Models.ApplicationDocument", "ApplicationDocument4")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument4ID");

                    b.HasOne("ACUnified.Data.Models.ApplicationDocument", "ApplicationDocument5")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument5ID");

                    b.HasOne("ACUnified.Data.Models.ApplicationDocument", "ApplicationDocument6")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument6ID");

                    b.HasOne("ACUnified.Data.Models.ApplicationDocument", "ApplicationDocument7")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument7ID");

                    b.HasOne("ACUnified.Data.Models.BioData", "BioData")
                        .WithMany()
                        .HasForeignKey("BioDataId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.NextOfKin", "NextOfKin")
                        .WithMany()
                        .HasForeignKey("NextOfKinId");

                    b.HasOne("ACUnified.Data.Models.OtherDetails", "OtherDetails")
                        .WithMany()
                        .HasForeignKey("OtherDetailsId");

                    b.HasOne("ACUnified.Data.Models.ProgramChoice", "ProgramChoice")
                        .WithMany()
                        .HasForeignKey("ProgramChoiceId");

                    b.HasOne("ACUnified.Data.Models.Reference", "References")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicQualification");

                    b.Navigation("ApplicationDocument1");

                    b.Navigation("ApplicationDocument2");

                    b.Navigation("ApplicationDocument3");

                    b.Navigation("ApplicationDocument4");

                    b.Navigation("ApplicationDocument5");

                    b.Navigation("ApplicationDocument6");

                    b.Navigation("ApplicationDocument7");

                    b.Navigation("ApplicationUser");

                    b.Navigation("BioData");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("NextOfKin");

                    b.Navigation("OtherDetails");

                    b.Navigation("ProgramChoice");

                    b.Navigation("References");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationProgram", b =>
                {
                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.Navigation("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.Navigation("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.BioData", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.Navigation("CurrentUser");

                    b.Navigation("Degree");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("Level");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Course", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.Navigation("Degree");

                    b.Navigation("Department");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("ACUnified.Data.Models.CourseRegistration", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.ProgramSetup", "ProgramSetup")
                        .WithMany()
                        .HasForeignKey("ProgramSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.StudentEnrolment", "StudentEnrolment")
                        .WithMany()
                        .HasForeignKey("StudentEnrolmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("ProgramSetup");

                    b.Navigation("Semester");

                    b.Navigation("Session");

                    b.Navigation("Student");

                    b.Navigation("StudentEnrolment");
                });

            modelBuilder.Entity("ACUnified.Data.Models.DebtorsList", b =>
                {
                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstitutionProvider");

                    b.Navigation("Semester");

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Degree", b =>
                {
                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.Navigation("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Department", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.Navigation("Faculty");

                    b.Navigation("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.EducationalRecord", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.EmploymentRecord", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationForm", "ApplicationForm")
                        .WithMany("EmploymentRecord")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.HStudentMasterRecord", null)
                        .WithMany("EmploymentRecord")
                        .HasForeignKey("HStudentMasterRecordId");

                    b.HasOne("ACUnified.Data.Models.StudentMasterRecord", null)
                        .WithMany("EmploymentRecord")
                        .HasForeignKey("StudentMasterRecordId");

                    b.Navigation("ApplicationForm");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Faculty", b =>
                {
                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.Navigation("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudent", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.ProgramSetup", "ProgramSetup")
                        .WithMany()
                        .HasForeignKey("ProgramSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentUser");

                    b.Navigation("Degree");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("Level");

                    b.Navigation("ProgramSetup");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentApplicationDocument", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentMasterRecord", b =>
                {
                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument1")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument1Id");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument2")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument2Id")
                        .HasConstraintName("FK_HStudentMasterRecord_StudentApplicationDocument_Application~1");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument3")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument3Id")
                        .HasConstraintName("FK_HStudentMasterRecord_StudentApplicationDocument_Application~2");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument4")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument4Id")
                        .HasConstraintName("FK_HStudentMasterRecord_StudentApplicationDocument_Application~3");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument5")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument5Id")
                        .HasConstraintName("FK_HStudentMasterRecord_StudentApplicationDocument_Application~4");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument6")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument6Id")
                        .HasConstraintName("FK_HStudentMasterRecord_StudentApplicationDocument_Application~5");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument7")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument7Id")
                        .HasConstraintName("FK_HStudentMasterRecord_StudentApplicationDocument_Application~6");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.ProgramChoice", "ProgramChoice")
                        .WithMany()
                        .HasForeignKey("ProgramChoiceId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.StudentAcademicQualification", "StudentAcademicQualification")
                        .WithMany()
                        .HasForeignKey("StudentAcademicQualificationId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("ACUnified.Data.Models.StudentNextOfKin", "NextOfKin")
                        .WithMany()
                        .HasForeignKey("StudentNextOfKinId");

                    b.HasOne("ACUnified.Data.Models.StudentOtherDetails", "StudentOtherDetails")
                        .WithMany()
                        .HasForeignKey("StudentOtherDetailsId");

                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationDocument1");

                    b.Navigation("ApplicationDocument2");

                    b.Navigation("ApplicationDocument3");

                    b.Navigation("ApplicationDocument4");

                    b.Navigation("ApplicationDocument5");

                    b.Navigation("ApplicationDocument6");

                    b.Navigation("ApplicationDocument7");

                    b.Navigation("ApplicationUser");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("NextOfKin");

                    b.Navigation("ProgramChoice");

                    b.Navigation("Session");

                    b.Navigation("Student");

                    b.Navigation("StudentAcademicQualification");

                    b.Navigation("StudentOtherDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentNextOfKin", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentOtherDetails", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentResult", b =>
                {
                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstitutionProvider");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HostelRooms", b =>
                {
                    b.HasOne("ACUnified.Data.Models.HostelBuilding", "HostelBuilding")
                        .WithMany()
                        .HasForeignKey("HostelBuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostelBuilding");
                });

            modelBuilder.Entity("ACUnified.Data.Models.LGA", b =>
                {
                    b.HasOne("ACUnified.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ACUnified.Data.Models.NextOfKin", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.OtherDetails", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayCategory", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.PayUploadCategoryBatch", "PayUploadCategoryBatch")
                        .WithMany()
                        .HasForeignKey("PayUploadCategoryBatchId");

                    b.HasOne("ACUnified.Data.Models.ProgramSetup", "ProgramSetup")
                        .WithMany()
                        .HasForeignKey("ProgramSetupId");

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.Level", "StudentLevel")
                        .WithMany()
                        .HasForeignKey("StudentLevelId");

                    b.Navigation("Degree");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("PayUploadCategoryBatch");

                    b.Navigation("ProgramSetup");

                    b.Navigation("Semester");

                    b.Navigation("Session");

                    b.Navigation("StudentLevel");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayConcession", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ACUnified.Data.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("ACUnified.Data.Models.PayUploadCategoryBatch", "PayUploadCategoryBatch")
                        .WithMany()
                        .HasForeignKey("PayUploadCategoryBatchId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("PayUploadCategoryBatch");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayDetails", b =>
                {
                    b.HasOne("ACUnified.Data.Models.PayCategory", "PayCategory")
                        .WithMany()
                        .HasForeignKey("PayCategoryId");

                    b.HasOne("ACUnified.Data.Models.PayConcession", "PayConcession")
                        .WithMany()
                        .HasForeignKey("PayConcessionId");

                    b.HasOne("ACUnified.Data.Models.PayUploadCategoryBatch", "PayUploadCategoryBatch")
                        .WithMany()
                        .HasForeignKey("PayUploadCategoryBatchId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("PayCategory");

                    b.Navigation("PayConcession");

                    b.Navigation("PayUploadCategoryBatch");

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadCategory", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.PayUploadCategoryBatch", "PayUploadCategoryBatch")
                        .WithMany()
                        .HasForeignKey("PayUploadCategoryBatchId");

                    b.HasOne("ACUnified.Data.Models.ProgramSetup", "ProgramSetup")
                        .WithMany()
                        .HasForeignKey("ProgramSetupId");

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.Level", "StudentLevel")
                        .WithMany()
                        .HasForeignKey("StudentLevelId");

                    b.Navigation("Degree");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("PayUploadCategoryBatch");

                    b.Navigation("ProgramSetup");

                    b.Navigation("Semester");

                    b.Navigation("Session");

                    b.Navigation("StudentLevel");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadCategoryBatch", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadConcession", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ACUnified.Data.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("ACUnified.Data.Models.PayUploadCategoryBatch", "PayUploadCategoryBatch")
                        .WithMany()
                        .HasForeignKey("PayUploadCategoryBatchId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("PayUploadCategoryBatch");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.PayUploadDetails", b =>
                {
                    b.HasOne("ACUnified.Data.Models.PayUploadCategoryBatch", "PayUploadCategoryBatch")
                        .WithMany()
                        .HasForeignKey("PayUploadCategoryBatchId");

                    b.HasOne("ACUnified.Data.Models.PayUploadCategory", "PayUploadCategory")
                        .WithMany()
                        .HasForeignKey("PayUploadCategoryId");

                    b.HasOne("ACUnified.Data.Models.PayUploadConcession", "PayUploadConcession")
                        .WithMany()
                        .HasForeignKey("PayUploadConcessionId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("PayUploadCategory");

                    b.Navigation("PayUploadCategoryBatch");

                    b.Navigation("PayUploadConcession");

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Payment", b =>
                {
                    b.HasOne("ACUnified.Data.Models.PayCategory", "PayCategory")
                        .WithMany()
                        .HasForeignKey("PayCategoryId");

                    b.HasOne("ACUnified.Data.Models.PayDetails", "PayDetails")
                        .WithMany()
                        .HasForeignKey("PayDetailsId");

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.Navigation("PayCategory");

                    b.Navigation("PayDetails");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ProgramChoice", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.ProgramSetup", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("ACUnified.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.Navigation("Degree");

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Reference", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Semester", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ACUnified.Data.Models.State", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Student", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.Navigation("CurrentUser");

                    b.Navigation("Degree");

                    b.Navigation("InstitutionProvider");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentAcademicQualification", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentApplicationDocument", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("CurrentUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentEnrolment", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.ProgramSetup", "ProgramSetup")
                        .WithMany()
                        .HasForeignKey("ProgramSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Level");

                    b.Navigation("ProgramSetup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentMasterRecord", b =>
                {
                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument1")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument1Id");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument2")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument2Id")
                        .HasConstraintName("FK_StudentMasterRecord_StudentApplicationDocument_ApplicationD~1");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument3")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument3Id")
                        .HasConstraintName("FK_StudentMasterRecord_StudentApplicationDocument_ApplicationD~2");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument4")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument4Id")
                        .HasConstraintName("FK_StudentMasterRecord_StudentApplicationDocument_ApplicationD~3");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument5")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument5Id")
                        .HasConstraintName("FK_StudentMasterRecord_StudentApplicationDocument_ApplicationD~4");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument6")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument6Id")
                        .HasConstraintName("FK_StudentMasterRecord_StudentApplicationDocument_ApplicationD~5");

                    b.HasOne("ACUnified.Data.Models.StudentApplicationDocument", "ApplicationDocument7")
                        .WithMany()
                        .HasForeignKey("ApplicationDocument7Id")
                        .HasConstraintName("FK_StudentMasterRecord_StudentApplicationDocument_ApplicationD~6");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.ProgramChoice", "ProgramChoice")
                        .WithMany()
                        .HasForeignKey("ProgramChoiceId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.StudentAcademicQualification", "StudentAcademicQualification")
                        .WithMany()
                        .HasForeignKey("StudentAcademicQualificationId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("ACUnified.Data.Models.StudentNextOfKin", "NextOfKin")
                        .WithMany()
                        .HasForeignKey("StudentNextOfKinId");

                    b.HasOne("ACUnified.Data.Models.StudentOtherDetails", "StudentOtherDetails")
                        .WithMany()
                        .HasForeignKey("StudentOtherDetailsId");

                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationDocument1");

                    b.Navigation("ApplicationDocument2");

                    b.Navigation("ApplicationDocument3");

                    b.Navigation("ApplicationDocument4");

                    b.Navigation("ApplicationDocument5");

                    b.Navigation("ApplicationDocument6");

                    b.Navigation("ApplicationDocument7");

                    b.Navigation("ApplicationUser");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("NextOfKin");

                    b.Navigation("ProgramChoice");

                    b.Navigation("Session");

                    b.Navigation("Student");

                    b.Navigation("StudentAcademicQualification");

                    b.Navigation("StudentOtherDetails");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentNextOfKin", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentOtherDetails", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("CurrentUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentResult", b =>
                {
                    b.HasOne("ACUnified.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("ACUnified.Data.Models.InstitutionProvider", "InstitutionProvider")
                        .WithMany()
                        .HasForeignKey("InstitutionProviderId");

                    b.HasOne("ACUnified.Data.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "ProcessedBy")
                        .WithMany()
                        .HasForeignKey("ProcessedById");

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("ACUnified.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("InstitutionProvider");

                    b.Navigation("Level");

                    b.Navigation("ProcessedBy");

                    b.Navigation("Semester");

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentResultUpload", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("ACUnified.Data.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("ACUnified.Data.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.Navigation("CurrentUser");

                    b.Navigation("Semester");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("ACUnified.Data.Models.Subject", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACUnified.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ACUnified.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ACUnified.Data.Models.ApplicationForm", b =>
                {
                    b.Navigation("EmploymentRecord");
                });

            modelBuilder.Entity("ACUnified.Data.Models.HStudentMasterRecord", b =>
                {
                    b.Navigation("EmploymentRecord");
                });

            modelBuilder.Entity("ACUnified.Data.Models.StudentMasterRecord", b =>
                {
                    b.Navigation("EmploymentRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
