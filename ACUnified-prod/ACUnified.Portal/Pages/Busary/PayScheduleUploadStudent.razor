@page "/busary/payScheduleUploadDetailsStudent/{PayCategoryId:long}"
@using System.Net.Http.Json
@using ACUnified.Data.DTOs
@using ACUnified.Data.Models
@using ACUnified.Business.Repository.IRepository
@using Hangfire
@using ACUnified.Business.Services
@layout ACUnifiedLayout  
@inject ISnackbar snackBar
@inject IPayUploadDetailsRepository payUploadDetailsRepository
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Bursary")]
<MudContainer>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<PayUploadDetailsDto>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table" GroupableColumns="@GroupableColumns"
              Grouping="true" GroupableDefinition="@_groupDefinition">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Pay Upload Student Listing</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="stdname_field" T="PayUploadDetails">Student Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="PayUploadDetails">Name</MudTableSortLabel></MudTh>


            <MudTh><MudTableSortLabel SortLabel="instal1_field" T="PayUploadDetails">1st Instalment</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="instal2_field" T="PayUploadDetails">2nd Instalment</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="instal3_field" T="PayUploadDetails">3rd Instalment</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="instal4_field" T="PayUploadDetails">2nd&3rd Instalment</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="instal4_field" T="PayUploadDetails">Total</MudTableSortLabel></MudTh>
            @*         <MudTh><MudTableSortLabel SortLabel="phone_field" T="PayUploadDetails">Phone</MudTableSortLabel></MudTh>
            *@        @* <MudTh><MudTableSortLabel SortLabel="position_field" T="Student">Position</MudTableSortLabel></MudTh> *@
            @* <MudTh><MudTableSortLabel SortLabel="mass_field" T="Student">Molar mass</MudTableSortLabel></MudTh> *@
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                @context.Student.FirstName @context.Student.LastName
            </MudTd>
            <MudTd DataLabel="Name">
                @context.Name
            </MudTd>
            <MudTd DataLabel="TotalPayDue">@context.PayInstalment1.ToString("#,##.00")</MudTd>
            <MudTd DataLabel="Instal1">@context.PayInstalment2.ToString("#,##.00")</MudTd>
            <MudTd DataLabel="Instal2">@context.PayInstalment3.ToString("#,##.00")</MudTd>
            <MudTd DataLabel="Instal3">@context.PayInstalment4.ToString("#,##.00")</MudTd>
            <MudTd DataLabel="Instal3">@context.TotalAmount.ToString("#,##.00")</MudTd>

            @*    <MudTd DataLabel="Matric">@context.Matric</MudTd>
            <MudTd DataLabel="Phone">@context.MobileNumber</MudTd>
            *@   @* <MudTd DataLabel="Position">@context.Position</MudTd> *@
            @* <MudTd DataLabel="Molar mass">@context.Molar</MudTd> *@
        </RowTemplate>
       
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="7">Total Expected Fee: @context.Items.Sum((e) => e.TotalAmount)</MudTh>
        </GroupFooterTemplate>
    </MudTable>
    <MudButton StartIcon="@Icons.Material.TwoTone.AutoFixHigh" OnClick="FinalizeRecord" Variant="Variant.Filled" Color="Color.Primary">Finalise</MudButton>
</MudContainer>


@code {
    private IEnumerable<PayUploadDetailsDto> pagedData;
    private MudTable<PayUploadDetailsDto> table;
    private int totalItems;
    private string searchString = null;

    [Parameter]
    public long PayCategoryId { get; set; }

    private IEnumerable<PayUploadDetailsDto> data;
    List<Func<PayUploadDetailsDto, object>> GroupableColumns { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await GetAllPayCategoryAsync();
        GroupableColumns = new List<Func<PayUploadDetailsDto, object>>()
        {
            item => item.Student.Id
        };
    }

    private async Task GetAllPayCategoryAsync()
    {
        data = (await payUploadDetailsRepository.GetPayUploadDetailsBatch(PayCategoryId)).ToList();
    }
    private TableGroupDefinition<PayUploadDetails> _groupDefinition = new TableGroupDefinition<PayUploadDetails>()
        {
            GroupName = "StdId",
            Indentation = false,
            Expandable = false,
            Selector = (e) => e.Student.Id,
            // InnerGroup = new TableGroupDefinition<PayUploadDetails>()
            // {
            //     GroupName = "Position",
            //     Expandable = false,
            //     Selector = (e) => e.TotalAmount
            // }

        };





    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<PayUploadDetailsDto>> ServerReload(TableState state)
    {
        IEnumerable<PayUploadDetailsDto> data = (await payUploadDetailsRepository.GetPayUploadDetailsBatch(PayCategoryId)).ToList();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Student.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Student.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            // if (element.TotalPayDue.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            //     return true;
            // if (element.Matric.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            //     return true;
            // if (element.MobileNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            //     return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            // case "amount_field":
            //     data = data.OrderByDirection(state.SortDirection, o => o.TotalPayDue);
            //     break;
                // case "phone_field":
                //     data = data.OrderByDirection(state.SortDirection, o => o.MobileNumber);
                //     break;
                // case "position_field":
                //     data = data.OrderByDirection(state.SortDirection, o => o.Position);
                //     break;
                // case "mass_field":
                //     data = data.OrderByDirection(state.SortDirection, o => o.Molar);
                //     break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<PayUploadDetailsDto>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    public async void FinalizeRecord()
    {
        var jobId = BackgroundJob.Enqueue<StudentFeeGenerationService>(x => x.FinaliseFeeGeneration(PayCategoryId));

        snackBar.Add("Generating Fees...", Severity.Success);
    }
}