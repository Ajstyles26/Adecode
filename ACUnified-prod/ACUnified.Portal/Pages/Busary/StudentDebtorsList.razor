@page "/busary/StudentDebtorsList"
@using System.Net.Http.Json
@using ACUnified.Data.DTOs
@using ACUnified.Data.Models
@using ACUnified.Business.Repository.IRepository
@inject System.Net.Http.HttpClient HttpClient

@layout ACUnifiedLayout
@inject ISnackbar snackBar
@inject IPaymentRepository DebtorListRepository
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Bursary")]
<MudTable ServerData="@(new Func<TableState, Task<TableData<DebtorsListDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Student Debtors List</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    <MudButton OnClick="@ExportToExcel">Export to Excel</MudButton>
    </ToolBarContent>
    <HeaderContent>
        
        <MudTh><MudTableSortLabel SortLabel="matric_field" T="DebtorsListDto">Matric</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="totalAmount_field" T="DebtorsListDto">Total Amount</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="paidAmount_field" T="DebtorsListDto">Total Paid</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="outstandingAmount_field" T="DebtorsListDto">Outstanding Amount</MudTableSortLabel></MudTh>
        
    </HeaderContent>
    <RowTemplate>
      
        <MudTd DataLabel="Matric">@context.Matric</MudTd>
        <MudTd DataLabel="TotalAmount">@context.TotalAmount.ToString("#,##.00")</MudTd>
        <MudTd DataLabel="TotalPaid">@context.TotalPaid.ToString("#,##.00")</MudTd>
        <MudTd DataLabel="OutstandingAmount">@context.OutstandingAmount.ToString("#,##.00")</MudTd>

    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<DebtorsListDto> pagedData;
    private MudTable<DebtorsListDto> table;
    private int totalItems;
    private string searchString = null;

    private IEnumerable<DebtorsListDto> data;
    protected override async Task OnInitializedAsync()
    {
        //await GetAllDebtorListsAsync();
    }

    private async Task GetAllDebtorListsAsync()
    {
        data = (await DebtorListRepository.GetAllDebtors()).ToList();
    }
    private async Task NavigateToDetail(long DebtorListId)
    {
        Navigation.NavigateTo($"/ict/biorecapture/{DebtorListId}");
    }


    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<DebtorsListDto>> ServerReload(TableState state)
    {
        IEnumerable<DebtorsListDto> data = (await DebtorListRepository.GetAllDebtors()).ToList();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            
            if (element.Matric.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
           
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            
            case "matric_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Matric);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<DebtorsListDto>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
    private async Task ExportToExcel()
    {
        
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7121/api/controller/DataExport/ExportToExcel", data);
        var url = await response.Content.ReadAsStringAsync();
        Navigation.NavigateTo(url, true);
    }
}