@page "/TuitionPaymentGate/{name}"

@using ACUnified.Business.Repository.IRepository
@using System.Security.Claims
@using ACUnified.Data.DTOs
@using ACUnified.Data.Enum
@using ACUnified.Portal.Utils
@layout ACUnifiedLayout

@inject IApplicantPaymentLogRepository paymentRepository
@inject IApplicantPayDetailsRepository payDetailsRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IApplicationFormRepository applicationForm
@inject IAcademicSessionRepository currentAcademicSession
@inject IBioDataRepository biodataRepository
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

@using ACUnified.Data.Models
@using Microsoft.AspNetCore.Identity
@using System.Text.Json

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@attribute [Authorize]

<MudBlazor.MudContainer Class="mt-2" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Applicant Order Page</MudText>
    <MudGrid Spacing="6" Class="mt-5">
        <MudItem xs="7">
            <MudText Typo="Typo.h5" GutterBottom="true">Billing address</MudText>
            <MudGrid>

                <MudItem xs="6">
                    <MudTextField T="string" @bind-Value="@paymentModel.payerName" Label="Name" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="paymentModel.payerEmail" Label="Email" ReadOnly="true" />
                </MudItem>
                @if (name == "BTHBA")
                {
                    <MudItem xs="12">
                        <MudSelect T="BTHBAConversionCategory" Label="Payment Category" @bind-Value="@BTHBAConversionCategoryInput">
                            <MudSelectItem T="BTHBAConversionCategory" Value=BTHBAConversionCategory.Collaborated>Collaborated </MudSelectItem>
                            <MudSelectItem T="BTHBAConversionCategory" Value=BTHBAConversionCategory.Independent>Independent </MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Collaborated)
                    {
                        <MudItem xs="12">
                            <MudSelect T="string" Label="BTHBA Center" @bind-Value="@BTHBACenterName">
                                <MudSelectItem T="string" Value="@("Lagos Anglican Seminary,Lagos")">Lagos Anglican Seminary, Lagos </MudSelectItem>
                                <MudSelectItem T="string" Value="@("Crowther Graduate Theological Seminary,Abeokuta")">Crowther Graduate Theological Seminary, Abeokuta </MudSelectItem>
                                <MudSelectItem T="string" Value="@("Bishop Crowther Theological Seminary, Okene")">Bishop Crowther Theological Seminary, Okene </MudSelectItem>
                                <MudSelectItem T="string" Value="@("St. Francis of Assisi, Theological Seminary, Wusasa, Zaria")">St. Francis of Assisi, Theological Seminary, Wusasa, Zaria </MudSelectItem>
                                <MudSelectItem T="string" Value="@("Reuben George Theological Seminary,Ibadan")">Reuben George Theological Seminary, Ibadan</MudSelectItem>
                                <MudSelectItem T="string" Value="@("Bethel Institute of Biblical Studies,Gbongan")">Bethel Institute of Biblical Studies, Gbongan </MudSelectItem>
                                <MudSelectItem T="string" Value="@("Christian Institute,Jos")">Christian Institute, Jos </MudSelectItem>
                                <MudSelectItem T="string" Value="@("Ezekiel College of Theology,Ekpoma")">Ezekiel College of Theology, Ekpoma </MudSelectItem>
                                <MudSelectItem T="string" Value="@("Robert Institute for Mission and Development,Calabar")">Robert Institute for Mission and Development, Calabar</MudSelectItem>
                                <MudSelectItem T="string" Value="@("Immanuel College of Theology and Christian Education,Samonda,Ibadan")">Immanuel College of Theology and Christian Education, Samonda, Ibadan</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    }
                  
                }
                  @if (name == "Law")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@LawPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Agricultural Economics")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@AgriculturalEconomicsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Agricultural Extension")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@AgriculturalExtensionPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Crop Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@CropSciencePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Animal Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@AnimalSciencePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Environmental Health Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@EnvironmentalHealthSciencePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Medical Laboratory Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@MedicalLaboratorySciencePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Nursing")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@NursingPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Radiography and radiation Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@RadiographyPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Mass Communication")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@MassCommunicationPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Library and Information Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@LibraryInfoSciencePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Business Education")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@BusinessEducationPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Economics Education")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@EconomicsEducationPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "English Education")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@EnglishEducationPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Guidance and Counseling")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@GuidanceCounselingPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Computer Education")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@ComputerEducationPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Civil Engineering")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@CivilEngineeringPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Computer Engineering")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@ComputerEngineeringPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Electrical Electronics Engineering")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@ElectricalEngineeringPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Mechanical Engineering")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@MechanicalEngineeringPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Architecture")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@ArchitecturePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Estate Management")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@EstateManagementPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "History & International Studies")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@HistoryInternationalPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}
@if (name == "English")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@EnglishPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Performing Arts")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@PerformingArtsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Religious Studies")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@ReligiousStudiesPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Accounting")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@AccountingPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Banking and Finance")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@BankingFinancePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Business Administration")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@BusinessAdminPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Industrial Relations and Personnel Management")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@IndustrialRelationsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Computer Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@ComputerSciencePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}
@if (name == "Computer Science(ICT Option)")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@ComputerScienceICTPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Industrial Chemistry")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@IndustrialChemistryPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Physics")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@PhysicsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Geology")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@GeologyPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Microbiology")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@MicrobiologyPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Biochemistry")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@BiochemistryPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Mathematics")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@MathematicsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Statistics")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@StatisticsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Economics")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@EconomicsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Political Science")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@PoliticalSciencePayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Peace Studies and Conflict Resolution")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@PeaceStudiesPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Surveying and Geoinformatics")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@SurveyingGeoinformaticsPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Music")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@MusicPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}

@if (name == "Entrepreneurship")
{
    <MudItem xs="12">
        <MudSelect T="PayPlan" Label="Payment Category" @bind-Value="@EntrepreneurshipPayplan">
            <MudSelectItem T="PayPlan" Value=PayPlan.Full>Full </MudSelectItem>
            <MudSelectItem T="PayPlan" Value=PayPlan.FirstInstalment>First Instalment</MudSelectItem>
        </MudSelect>
    </MudItem>
}
@{
    var excludedPrograms = new[]
    {
        "Agricultural Economics", "Agricultural Extension", "Crop Science", "Animal Science",
        "Environmental Health Science", "Medical Laboratory Science", "Nursing",
        "Radiography and radiation Science", "Mass Communication", "Library and Information Science",
        "Business Education", "Economics Education", "English Education", "Guidance and Counseling",
        "Computer Education", "Civil Engineering", "Computer Engineering", "Electrical Electronics Engineering",
        "Mechanical Engineering", "Architecture", "Estate Management", "English",
        "History & International Studies", "Performing Arts", "Religious Studies", "Law",
        "Accounting", "Banking and Finance", "Business Administration",
        "Industrial Relations and Personnel Management", "Computer Science",
        "Computer Science(ICT Option)", "Industrial Chemistry", "Physics", "Geology",
        "Microbiology", "Biochemistry", "Mathematics", "Statistics", "Economics",
        "Political Science", "Peace Studies and Conflict Resolution", "Surveying and Geoinformatics",
        "Music", "Entrepreneurship"
    };
}

@if (!excludedPrograms.Contains(name))
{
    <MudButton OnClick="OnHalfPaymentClickAsync" 
               Variant="Variant.Filled" 
               DisableElevation="true" 
               Color="Color.Primary" 
               Size="Size.Large" 
               Class="mt-8">
        Pay Half
    </MudButton>
}

               
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton OnClick="OnPaymentClickAsync" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Continue to Payment</MudButton>
                    <br/>
                    
                </MudItem>                    
 </MudGrid>
        </MudItem>
        <MudItem xs="5">
            <MudText Typo="Typo.h5" GutterBottom="true">Cart</MudText>

            <MudText>Pay ref: @paymentModel.orderId</MudText>

            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem Icon="@Icons.Material.Filled.BookOnline">

                        <div class="d-flex">
                            <MudText>@paymentModel.payerName</MudText>
                            @if (name == "BTHBA")
                            {
                                @if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Collaborated)
                                {
                                    <MudText Inline="true" Class="ml-auto">NGN @currentPayDetails1.Amount.ToString("###,#")</MudText>
                                }
                                @if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Independent)
                                {
                                    <MudText Inline="true" Class="ml-auto">NGN @currentPayDetails2.Amount.ToString("###,#")</MudText>
                                }
                            }
                            @if(name == "Law")
                            {
                                @if(LawPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @lawPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(LawPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @lawPayDetails1.Amount.ToString("###,#")</MudText>
                                }
                            }
                            @if (name == "Agricultural Economics")
{
     @if(AgriculturalEconomicsPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(AgriculturalEconomicsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

 @if (name == "Crop Science")
{
    @if(CropSciencePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(CropSciencePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails1.Amount.ToString("###,#")</MudText>
                                }
} 

@if (name == "Agricultural Extension")
{
   @if(AgriculturalExtensionPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(AgriculturalExtensionPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Animal Science")
{
   @if(AnimalSciencePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(AnimalSciencePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Environmental Health Science")
{
     @if(EnvironmentalHealthSciencePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @ehsPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(EnvironmentalHealthSciencePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @ehsPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Medical Laboratory Science")
{
   @if(MedicalLaboratorySciencePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @mlsPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(MedicalLaboratorySciencePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @mlsPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Nursing")
{
      @if(NursingPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @nursingPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(NursingPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @nursingPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                                }
    
}

@if (name == "Radiography and radiation Science")
{
     @if(RadiographyPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @rrrPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(RadiographyPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @rrrPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Mass Communication")
{
  @if(MassCommunicationPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @cmsPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(MassCommunicationPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @cmsPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Library and Information Science")
{
   @if(LibraryInfoSciencePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @lisPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(LibraryInfoSciencePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @lisPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}
@if (name == "Business Education")
{
       @if(BusinessEducationPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(BusinessEducationPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Economics Education")
{
     @if(EconomicsEducationPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(EconomicsEducationPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "English Education")
{
@if(EnglishEducationPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(EnglishEducationPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Guidance and Counseling")
{
   @if(GuidanceCounselingPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(GuidanceCounselingPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Computer Education")
{
     @if(ComputerEducationPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(ComputerEducationPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @educationPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Civil Engineering")
{
     @if(CivilEngineeringPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(CivilEngineeringPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
    
}

@if (name == "Computer Engineering")
{ 
    @if(ComputerEngineeringPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(ComputerEngineeringPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Electrical Electronics Engineering")
{
    @if(ElectricalEngineeringPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(ElectricalEngineeringPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Mechanical Engineering")
{
    @if(MechanicalEngineeringPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(MechanicalEngineeringPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Architecture")
{
   @if(ArchitecturePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @architecturePayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(ArchitecturePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @architecturePayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Estate Management")
{
   @if(EstateManagementPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @estPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(EstateManagementPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @estPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "History & International Studies")
{
   @if(HistoryInternationalPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @hisPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(HistoryInternationalPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @hisPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}
@if (name == "English")
{
     @if(EnglishPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @englishPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(HistoryInternationalPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @englishPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }   
}

@if (name == "Performing Arts")
{
       @if(PerformingArtsPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @pfaPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(PerformingArtsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @pfaPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Religious Studies")
{ 
     @if(ReligiousStudiesPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(ReligiousStudiesPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @agriculturalPayDetails1.Amount.ToString("###,#")</MudText>
                           }
    
}

@if (name == "Accounting")
{
     @if(AccountingPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @accPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(AccountingPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @accPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
    
}

@if (name == "Banking and Finance")
{
   @if(BankingFinancePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @bafPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(BankingFinancePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @bafPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }  
}

@if (name == "Business Administration")
{
    @if(BusinessAdminPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @busPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(BusinessAdminPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @busPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }   
    
}

@if (name == "Industrial Relations and Personnel Management")
{
    @if(IndustrialRelationsPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @inrPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(IndustrialRelationsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @inrPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }  
}

@if (name == "Computer Science")
{
    @if(ComputerSciencePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(ComputerSciencePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}
@if (name == "Computer Science(ICT Option)")
{
    @if(ComputerScienceICTPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(ComputerScienceICTPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Industrial Chemistry")
{
     @if(IndustrialChemistryPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @bioPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(IndustrialChemistryPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @bioPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Physics")
{
   @if(PhysicsPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @phyPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(PhysicsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @phyPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Geology")
{
     @if(GeologyPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @geoPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(GeologyPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @geoPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Microbiology")
{
    @if(MicrobiologyPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @busPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(MicrobiologyPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @busPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Biochemistry")
{
     @if(BiochemistryPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @bioPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(BiochemistryPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @bioPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Mathematics")
{
    @if(MathematicsPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @mthPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(MathematicsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @mthPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Statistics")
{
    @if(StatisticsPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @mthPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(StatisticsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @mthPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Economics")
{
    @if(EconomicsPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @busPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(EconomicsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @busPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Political Science")
{
    @if(PoliticalSciencePayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @polPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(PoliticalSciencePayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @polPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           } 
}

@if (name == "Peace Studies and Conflict Resolution")
{
     @if(PeaceStudiesPayplan == PayPlan.Full){
                                <MudText Inline="true" Class="ml-auto">NGN @lisPayplanPayplanPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(PeaceStudiesPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @lisPayplanPayDetails1.Amount.ToString("###,#")</MudText>
                           }
}

@if (name == "Surveying and Geoinformatics")
{
      @if(SurveyingGeoinformaticsPayplan == PayPlan.Full){
                              <MudText Inline="true" Class="ml-auto">NGN @surveryPayDetail.Amount.ToString("###,#")</MudText>
                                }
                                @if(SurveyingGeoinformaticsPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @surveryPayDetail1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Music")
{
        @if(MusicPayplan == PayPlan.Full){
                              <MudText Inline="true" Class="ml-auto">NGN @musicPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(MusicPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @musicPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}

@if (name == "Entrepreneurship")
{
                         @if(EntrepreneurshipPayplan == PayPlan.Full){
                              <MudText Inline="true" Class="ml-auto">NGN @entrepreneurshipPayDetails.Amount.ToString("###,#")</MudText>
                                }
                                @if(EntrepreneurshipPayplan == PayPlan.FirstInstalment){
                                <MudText Inline="true" Class="ml-auto">NGN @entrepreneurshipPayDetails1.Amount.ToString("###,#")</MudText>
                                }
}
@{
    var excludeP = new[]
    {
        "Agricultural Economics", "Agricultural Extension", "Crop Science", "Animal Science",
        "Environmental Health Science", "Medical Laboratory Science", "Nursing",
        "Radiography and radiation Science", "Mass Communication", "Library and Information Science",
        "Business Education", "Economics Education", "English Education", "Guidance and Counseling",
        "Computer Education", "Civil Engineering", "Computer Engineering", "Electrical Electronics Engineering",
        "Mechanical Engineering", "Architecture", "Estate Management", "English",
        "History & International Studies", "Performing Arts", "Religious Studies", "Law",
        "Accounting", "Banking and Finance", "Business Administration",
        "Industrial Relations and Personnel Management", "Computer Science",
        "Computer Science(ICT Option)", "Industrial Chemistry", "Physics", "Geology",
        "Microbiology", "Biochemistry", "Mathematics", "Statistics", "Economics",
        "Political Science", "Peace Studies and Conflict Resolution", "Surveying and Geoinformatics",
        "Music", "Entrepreneurship", "BTHBA"
    };
} 
@if (!excludeP.Contains(name))
{

    <MudText Inline="true" Class="ml-auto">
        NGN @currentPayDetails.Amount.ToString("###,#")
    </MudText>
}

                           @* @if (name != "Law" && name != "BTHBA")
{
    <MudText Inline="true" Class="ml-auto">NGN @currentPayDetails.Amount.ToString("###,#")</MudText>
} *@

                          
                        </div>
                    </MudListItem>
                </MudList>
                <div class="mt-auto">
                    <MudDivider />
                    <div class="d-flex pa-4">
                        <MudText>Total:</MudText>
                        <MudText Class="ml-auto">
                             @if (name == "BTHBA")
                            {
                                @if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Collaborated)
                                {
                                    <b>NGN @currentPayDetails1.Amount.ToString("###,#")</b>
                                    
                                }

                                @if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Independent)
                                {
                                    <b>NGN @currentPayDetails2.Amount.ToString("###,#")</b>
                                }
                            }
                           

@if (name == "Agricultural Economics")
{
    @if (AgriculturalEconomicsPayplan == PayPlan.Full)
    {
        <b>NGN @agriculturalPayDetails.Amount.ToString("###,#")</b>
    }
    @if (AgriculturalEconomicsPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @agriculturalPayDetails1.Amount.ToString("###,#")</b>
    }
}

 @if (name == "Crop Science")
{
    @if (CropSciencePayplan == PayPlan.Full)
    {
        <b>NGN @agriculturalPayDetails.Amount.ToString("###,#")</b>
    }
    @if (CropSciencePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @agriculturalPayDetails1.Amount.ToString("###,#")</b>
    }
} 

@if (name == "Agricultural Extension")
{
    @if (AgriculturalExtensionPayplan == PayPlan.Full)
    {
        <b>NGN @agriculturalPayDetails.Amount.ToString("###,#")</b>
    }
    @if (AgriculturalExtensionPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @agriculturalPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Animal Science")
{
    @if (AnimalSciencePayplan == PayPlan.Full)
    {
        <b>NGN @agriculturalPayDetails.Amount.ToString("###,#")</b>
    }
    @if (AnimalSciencePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @agriculturalPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Environmental Health Science")
{
    @if (EnvironmentalHealthSciencePayplan == PayPlan.Full)
    {
        <b>NGN @ehsPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (EnvironmentalHealthSciencePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @ehsPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Medical Laboratory Science")
{
    @if (MedicalLaboratorySciencePayplan == PayPlan.Full)
    {
        <b>NGN @mlsPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (MedicalLaboratorySciencePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @mlsPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Religious Studies")
{ 
     @if(ReligiousStudiesPayplan == PayPlan.Full){
                                <b>NGN @agriculturalPayDetails.Amount.ToString("###,#")</b>
                                }
                                @if(ReligiousStudiesPayplan == PayPlan.FirstInstalment){
                                <b>NGN @agriculturalPayDetails1.Amount.ToString("###,#")</b>
                                    
                                
                           }
    
}

@if (name == "Nursing")
{
    @if (NursingPayplan == PayPlan.Full)
    {
        <b>NGN @nursingPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (NursingPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @nursingPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Radiography and radiation Science")
{
    @if (RadiographyPayplan == PayPlan.Full)
    {
        <b>NGN @rrrPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (RadiographyPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @rrrPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Mass Communication")
{
    @if (MassCommunicationPayplan == PayPlan.Full)
    {
        <b>NGN @cmsPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (MassCommunicationPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @cmsPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Library and Information Science")
{
    @if (LibraryInfoSciencePayplan == PayPlan.Full)
    {
        <b>NGN @lisPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (LibraryInfoSciencePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @lisPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Business Education" || name == "Economics Education" || name == "English Education" || name == "Guidance and Counseling" || name == "Computer Education")
{
    @if (BusinessEducationPayplan == PayPlan.Full || EconomicsEducationPayplan == PayPlan.Full || EnglishEducationPayplan == PayPlan.Full || GuidanceCounselingPayplan == PayPlan.Full || ComputerEducationPayplan == PayPlan.Full)
    {
        <b>NGN @educationPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (BusinessEducationPayplan == PayPlan.FirstInstalment || EconomicsEducationPayplan == PayPlan.FirstInstalment || EnglishEducationPayplan == PayPlan.FirstInstalment || GuidanceCounselingPayplan == PayPlan.FirstInstalment || ComputerEducationPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @educationPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Civil Engineering" || name == "Computer Engineering" || name == "Electrical/Electronics Engineering" || name == "Mechanical Engineering")
{
    @if (CivilEngineeringPayplan == PayPlan.Full || ComputerEngineeringPayplan == PayPlan.Full || ElectricalEngineeringPayplan == PayPlan.Full || MechanicalEngineeringPayplan == PayPlan.Full)
    {
        <b>NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (CivilEngineeringPayplan == PayPlan.FirstInstalment || ComputerEngineeringPayplan == PayPlan.FirstInstalment || ElectricalEngineeringPayplan == PayPlan.FirstInstalment || MechanicalEngineeringPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Architecture")
{
    @if (ArchitecturePayplan == PayPlan.Full)
    {
        <b>NGN @architecturePayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (ArchitecturePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @architecturePayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Estate Management")
{
    @if (EstateManagementPayplan == PayPlan.Full)
    {
        <b>NGN @estPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (EstateManagementPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @estPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "History & International Studies")
{
    @if (HistoryInternationalPayplan == PayPlan.Full)
    {
        <b>NGN @hisPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (HistoryInternationalPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @hisPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "English")
{
    @if (EnglishPayplan == PayPlan.Full)
    {
        <b>NGN @englishPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (EnglishPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @englishPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Performing Arts")
{
    @if (PerformingArtsPayplan == PayPlan.Full)
    {
        <b>NGN @pfaPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (PerformingArtsPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @pfaPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Law")
{
    @if (LawPayplan == PayPlan.Full)
    {
        <b>NGN @lawPayDetails.Amount.ToString("###,#")</b>
    }
    @if (LawPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @lawPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Accounting")
{
    @if (AccountingPayplan == PayPlan.Full)
    {
        <b>NGN @accPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (AccountingPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @accPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Banking and Finance")
{
    @if (BankingFinancePayplan == PayPlan.Full)
    {
        <b>NGN @bafPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (BankingFinancePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @bafPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Business Administration")
{
    @if (BusinessAdminPayplan == PayPlan.Full)
    {
        <b>NGN @busPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (BusinessAdminPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @busPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Industrial Relations and Personnel Management")
{
    @if (IndustrialRelationsPayplan == PayPlan.Full)
    {
        <b>NGN @inrPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (IndustrialRelationsPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @inrPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Computer Science" || name == "Computer Science(ICT Option)")
{
    @if (ComputerSciencePayplan == PayPlan.Full || ComputerScienceICTPayplan == PayPlan.Full)
    {
        <b>NGN @engineeringPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (ComputerSciencePayplan == PayPlan.FirstInstalment || ComputerScienceICTPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @engineeringPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Industrial Chemistry")
{
    @if (IndustrialChemistryPayplan == PayPlan.Full)
    {
        <b>NGN @bioPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (IndustrialChemistryPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @bioPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Physics")
{
    @if (PhysicsPayplan == PayPlan.Full)
    {
        <b>NGN @phyPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (PhysicsPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @phyPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Geology")
{
    @if (GeologyPayplan == PayPlan.Full)
    {
        <b>NGN @geoPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (GeologyPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @geoPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Microbiology")
{
    @if (MicrobiologyPayplan == PayPlan.Full)
    {
        <b>NGN @busPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (MicrobiologyPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @busPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Biochemistry")
{
    @if (BiochemistryPayplan == PayPlan.Full)
    {
        <b>NGN @bioPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (BiochemistryPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @bioPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Mathematics" || name == "Statistics")
{
    @if (MathematicsPayplan == PayPlan.Full || StatisticsPayplan == PayPlan.Full)
    {
        <b>NGN @mthPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (MathematicsPayplan == PayPlan.FirstInstalment || StatisticsPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @mthPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Economics")
{
    @if (EconomicsPayplan == PayPlan.Full)
    {
        <b>NGN @busPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (EconomicsPayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @busPayplanPayDetails1.Amount.ToString("###,#")</b>
    }
}

@if (name == "Political Science")
{
    @if (PoliticalSciencePayplan == PayPlan.Full)
    {
        <b>NGN @polPayplanPayDetails.Amount.ToString("###,#")</b>
    }
    @if (PoliticalSciencePayplan == PayPlan.FirstInstalment)
    {
        <b>NGN @polPayplanPayDetails1.Amount.ToString("###,#")</b>
        }
 }   

 @if (name == "Peace Studies and Conflict Resolution")
{
     @if(PeaceStudiesPayplan == PayPlan.Full){
                                <b>NGN @lisPayplanPayplanPayDetails.Amount.ToString("###,#")</b>
                                }
                                @if(PeaceStudiesPayplan == PayPlan.FirstInstalment){
                                <b>NGN @lisPayplanPayDetails1.Amount.ToString("###,#")</b>
                           }
}

@if (name == "Surveying and Geoinformatics")
{
      @if(SurveyingGeoinformaticsPayplan == PayPlan.Full){
                              <b>NGN @surveryPayDetail.Amount.ToString("###,#")</b>
                                }
                                @if(SurveyingGeoinformaticsPayplan == PayPlan.FirstInstalment){
                                <b>NGN @surveryPayDetail1.Amount.ToString("###,#")</b>
                                }
}

@if (name == "Music")
{
        @if(MusicPayplan == PayPlan.Full){
                              <b>NGN @musicPayDetails.Amount.ToString("###,#")</b>
                                }
                                @if(MusicPayplan == PayPlan.FirstInstalment){
                                <b>NGN @musicPayDetails1.Amount.ToString("###,#")</b>
                                }
}

@if (name == "Entrepreneurship")
{
                         @if(EntrepreneurshipPayplan == PayPlan.Full){
                              <b>NGN @entrepreneurshipPayDetails.Amount.ToString("###,#")</b>
                                }
                                @if(EntrepreneurshipPayplan == PayPlan.FirstInstalment){
                                <b>NGN @entrepreneurshipPayDetails1.Amount.ToString("###,#")</b>
                                }
}  

                            @{
    var excludeP = new[]
    {
        "Agricultural Economics", "Agricultural Extension", "Crop Science", "Animal Science",
        "Environmental Health Science", "Medical Laboratory Science", "Nursing",
        "Radiography and radiation Science", "Mass Communication", "Library and Information Science",
        "Business Education", "Economics Education", "English Education", "Guidance and Counseling",
        "Computer Education", "Civil Engineering", "Computer Engineering", "Electrical Electronics Engineering",
        "Mechanical Engineering", "Architecture", "Estate Management", "English",
        "History & International Studies", "Performing Arts", "Religious Studies", "Law",
        "Accounting", "Banking and Finance", "Business Administration",
        "Industrial Relations and Personnel Management", "Computer Science",
        "Computer Science(ICT Option)", "Industrial Chemistry", "Physics", "Geology",
        "Microbiology", "Biochemistry", "Mathematics", "Statistics", "Economics",
        "Political Science", "Peace Studies and Conflict Resolution", "Surveying and Geoinformatics",
        "Music", "Entrepreneurship", "BTHBA"
    };
} 
                          @if (!excludeP.Contains(name))
{
   <b>NGN @currentPayDetails2.Amount.ToString("###,#")</b>
}
                        </MudText>
                    </div>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <form id="remitaForm" action="@baseurl" method="POST">
        <input type="hidden" name="payerName" id="payerName" value="@paymentModel.payerName" />
        <input type="hidden" name="payerEmail" id="payerEmail" value="@paymentModel.payerEmail" />
        <input type="hidden" name="payerPhone" id="payerPhone" value="@paymentModel.payerPhone" />
        <input type="hidden" name="orderId" id="orderId" value="@paymentModel.orderId" />
        <input type="hidden" name="merchantId" id="merchantId" value="@paymentModel.merchantId" />
        <input type="hidden" name="serviceTypeId" id="serviceTypeId" value="@paymentModel.serviceTypeId" />
        <input type="hidden" name="responseurl" id="responseurl" value="@paymentModel.responseurl" />
        <input type="hidden" name="amt" id="amt" value="@paymentModel.amount" />
        <input type="hidden" name="hash" id="hash" value="@paymentModel.hash" />
        <input type="hidden" name="paymenttype" id="paymenttype" value="@paymentModel.paymentType" />
    </form>
</MudBlazor.MudContainer>



@code {

    [Parameter]
    public string name { get; set; }
    public string baseurl = "https://login.remita.net/remita/ecomm/init.reg";
    private PaymentModel paymentModel = new PaymentModel();
    private  BTHBAConversionCategory BTHBAConversionCategoryInput = BTHBAConversionCategory.None;
    private string BTHBACenterName = "";

    private PayPlan LawPayplan = PayPlan.NotPaid;
    private PayPlan AgriculturalEconomicsPayplan = PayPlan.NotPaid;
    private PayPlan AgriculturalExtensionPayplan = PayPlan.NotPaid;
    private PayPlan CropSciencePayplan = PayPlan.NotPaid;
    private PayPlan AnimalSciencePayplan =PayPlan.NotPaid;
    private PayPlan EnvironmentalHealthSciencePayplan = PayPlan.NotPaid;
     private PayPlan MedicalLaboratorySciencePayplan  = PayPlan.NotPaid;
    private PayPlan NursingPayplan  = PayPlan.NotPaid;
    private PayPlan RadiographyPayplan = PayPlan.NotPaid;
    private PayPlan MassCommunicationPayplan = PayPlan.NotPaid;
    private PayPlan LibraryInfoSciencePayplan =PayPlan.NotPaid;
    private PayPlan  BusinessEducationPayplan = PayPlan.NotPaid;
    private PayPlan EconomicsEducationPayplan = PayPlan.NotPaid;
    private PayPlan EnglishEducationPayplan  = PayPlan.NotPaid;
    private PayPlan GuidanceCounselingPayplan = PayPlan.NotPaid;
    private PayPlan ComputerEducationPayplan  = PayPlan.NotPaid;
    private PayPlan CivilEngineeringPayplan =PayPlan.NotPaid;
    private PayPlan ComputerEngineeringPayplan = PayPlan.NotPaid;
    private PayPlan IndustrialRelationsPayplan =PayPlan.NotPaid;
      private PayPlan ElectricalEngineeringPayplan  = PayPlan.NotPaid;
    private PayPlan  MechanicalEngineeringPayplan = PayPlan.NotPaid;
    private PayPlan ArchitecturePayplan = PayPlan.NotPaid;
    private PayPlan  EstateManagementPayplan= PayPlan.NotPaid;
    private PayPlan HistoryInternationalPayplan =PayPlan.NotPaid;
    private PayPlan  EnglishPayplan = PayPlan.NotPaid;
    private PayPlan PerformingArtsPayplan = PayPlan.NotPaid;
    private PayPlan  ReligiousStudiesPayplan = PayPlan.NotPaid;
    private PayPlan AccountingPayplan = PayPlan.NotPaid;
    private PayPlan   BankingFinancePayplan = PayPlan.NotPaid;
    private PayPlan BusinessAdminPayplan =PayPlan.NotPaid;
    private PayPlan  ComputerSciencePayplan = PayPlan.NotPaid;
     private PayPlan  ComputerScienceICTPayplan =PayPlan.NotPaid;
    private PayPlan  IndustrialChemistryPayplan  = PayPlan.NotPaid;
    private PayPlan PhysicsPayplan = PayPlan.NotPaid;
    private PayPlan  GeologyPayplan = PayPlan.NotPaid;
    private PayPlan  MicrobiologyPayplan= PayPlan.NotPaid;
    private PayPlan   BiochemistryPayplan = PayPlan.NotPaid;
    private PayPlan MathematicsPayplan =PayPlan.NotPaid;
    private PayPlan   StatisticsPayplan = PayPlan.NotPaid;
    private PayPlan  EconomicsPayplan= PayPlan.NotPaid;
    private PayPlan PoliticalSciencePayplan= PayPlan.NotPaid;
    private PayPlan PeaceStudiesPayplan = PayPlan.NotPaid;
    private PayPlan  SurveyingGeoinformaticsPayplan  = PayPlan.NotPaid;
    private PayPlan MusicPayplan =PayPlan.NotPaid;
    private PayPlan    EntrepreneurshipPayplan= PayPlan.NotPaid;
    



    public bool _loading { get; set; }


    public ApplicantPayment currentPayment = new ApplicantPayment();
    ApplicantPayDetailsDto currentPayDetails = new ApplicantPayDetailsDto();
    ApplicantPayDetailsDto currentPayDetails1 = new ApplicantPayDetailsDto();
    ApplicantPayDetailsDto currentPayDetails2 = new ApplicantPayDetailsDto();
    ApplicantPayDetailsDto lawPayDetails = new ApplicantPayDetailsDto();
    ApplicantPayDetailsDto lawPayDetails1 = new ApplicantPayDetailsDto();
    // Initialize PayDetail objects
ApplicantPayDetailsDto surveryPayDetail = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto agriculturalPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto ehsPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto mlsPayplanPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto nursingPayplanPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto rrrPayplanPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto cmsPayplanPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto lisPayplanPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto educationPayplanPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto engineeringPayplanPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto architecturePayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto estPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto hisPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto englishPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto pfaPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto accPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto bafPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto busPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto inrPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto bioPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto phyPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto geoPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto mthPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto polPayplanPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto musicPayDetails = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto entrepreneurshipPayDetails = new ApplicantPayDetailsDto();

// Initialize PayDetail1 objects
ApplicantPayDetailsDto surveryPayDetail1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto agriculturalPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto ehsPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto mlsPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto nursingPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto rrrPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto cmsPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto lisPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto educationPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto engineeringPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto architecturePayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto estPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto hisPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto englishPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto pfaPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto accPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto bafPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto busPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto inrPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto bioPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto phyPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto geoPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto mthPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto polPayplanPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto musicPayDetails1 = new ApplicantPayDetailsDto();
ApplicantPayDetailsDto entrepreneurshipPayDetails1 = new ApplicantPayDetailsDto();
    ApplicationFormDto currentApplicationForm = new ApplicationFormDto();
    ApplicantPaymentLogDto currentApplicantPaymentLog = new ApplicantPaymentLogDto();
    IEnumerable<SessionDto> currentSession = new List<SessionDto>();
    public string userId;
    protected override async Task OnInitializedAsync()
    {

        _loading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        currentSession = await currentAcademicSession.GetActiveApplicantSession();
        currentPayDetails = await payDetailsRepository.GetPayDetailsByName(name);
        currentPayDetails1 = await payDetailsRepository.GetPayDetailsByName("TutionCollaboratedBTHBA");
        currentPayDetails2 = await payDetailsRepository.GetPayDetailsByName("TutionIndependentBTHBA");
        lawPayDetails = await payDetailsRepository.GetPayDetailsByName("LawFull");
        lawPayDetails1 = await payDetailsRepository.GetPayDetailsByName("LawFirstInstallment");
        // Surveying and Geoinformatics
surveryPayDetail = await payDetailsRepository.GetPayDetailsByName("SurveyingFull");
surveryPayDetail1 = await payDetailsRepository.GetPayDetailsByName("SurveyingFirstInstallment");

// Agricultural Economics
agriculturalPayDetails = await payDetailsRepository.GetPayDetailsByName("AgriculturalEconomicsFull");
agriculturalPayDetails1 = await payDetailsRepository.GetPayDetailsByName("AgriculturalEconomicsFirstInstallment");

// Environmental Health Science
ehsPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Environmental Health ScienceFull");
ehsPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Environmental Health ScienceFirstInstallment");

// Medical Laboratory Science
mlsPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Medical Laboratory ScienceFull");
mlsPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Medical Laboratory ScienceFirstInstallment");

// Nursing
nursingPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("NursingFull");
nursingPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("NursingFirstInstallment");

// Radiography and radiation Science
rrrPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Radiography and radiation ScienceFull");
rrrPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Radiography and radiation ScienceFirstInstallment");

// Mass Communication
cmsPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Mass CommunicationFull");
cmsPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Mass CommunicationFirstInstallment");

// Library and Information Science
lisPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Library and Information ScienceFull");
lisPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("LISFirst");

// Education Courses (Business, Economics, English, Guidance and Counseling, Computer)
educationPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Business EducationFull");
educationPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Business EducationFirstInstallment");

// Engineering Courses (Civil, Computer, Electrical/Electronics, Mechanical)
engineeringPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Civil EngineeringFull");
engineeringPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Civil EngineeringFirstInstallment");

// Architecture
architecturePayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("ArchitectureFull");
architecturePayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("ArchitectureFirstInstallment");

// Estate Management
estPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Estate ManagementFull");
estPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Estate ManagementFirstInstallment");

// History & International Studies
hisPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("History & International StudiesFull");
hisPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("History & International StudiesFirstInstallment");

// English
englishPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("EnglishFull");
englishPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("EnglishFirstInstallment");

// Performing Arts
pfaPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Performing ArtsFull");
pfaPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Performing ArtsFirstInstallment");

// Accounting
accPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("AccountingFull");
accPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("AccountingFirstInstallment");

// Banking and Finance
bafPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Banking and FinanceFull");
bafPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Banking and FinanceFirstInstallment");

// Business Administration
busPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Business AdministrationFull");
busPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Business AdministrationFirstInstallment");

// Industrial Relations and Personnel Management
inrPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Industrial Relations and Personnel ManagementFull");
inrPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Industrial Relations and Personnel ManagementFirstInstallment");

// Computer Science
engineeringPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Computer ScienceFull");
engineeringPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Computer ScienceFirstInstallment");

// Industrial Chemistry
bioPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Industrial ChemistryFull");
bioPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Industrial ChemistryFirstInstallment");

// Physics
phyPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("PhysicsFull");
phyPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("PhysicsFirstInstallment");

// Geology
geoPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("GeologyFull");
geoPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("GeologyFirstInstallment");

// Microbiology
busPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("MicrobiologyFull");
busPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("MicrobiologyFirstInstallment");

// Biochemistry
bioPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("BiochemistryFull");
bioPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("BiochemistryFirstInstallment");

// Mathematics and Statistics
mthPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("MathematicsFull");
mthPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("MathematicsFirstInstallment");

// Economics
busPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("EconomicsFull");
busPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("EconomicsFirstInstallment");

// Political Science
polPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Political ScienceFull");
polPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("Political ScienceFirstInstallment");

// Peace Studies and Conflict Resolution
lisPayplanPayplanPayDetails = await payDetailsRepository.GetPayDetailsByName("Peace Studies and Conflict ResolutionFull");
lisPayplanPayDetails1 = await payDetailsRepository.GetPayDetailsByName("LISFirst");

// Music
musicPayDetails = await payDetailsRepository.GetPayDetailsByName("MusicFull");
musicPayDetails1 = await payDetailsRepository.GetPayDetailsByName("MusicFirstInstallment");

// Entrepreneurship
entrepreneurshipPayDetails = await payDetailsRepository.GetPayDetailsByName("EntrepreneurshipFull");
entrepreneurshipPayDetails1 = await payDetailsRepository.GetPayDetailsByName("EntrepreneurshipFirstInstallment");
        currentApplicationForm = await applicationForm.GetApplicationFormByUserId(userId);
        if (userId != null)
        {
            var userInformation = await UserManager.FindByIdAsync(userId);
            paymentModel.payerName = userInformation.Firstname + " " + userInformation.Surname;
            paymentModel.payerEmail = userInformation.Email;
            paymentModel.payerPhone = userInformation.PhoneNumber;

            currentApplicantPaymentLog.email = userInformation.Email;
            currentApplicantPaymentLog.client_name = userInformation.Firstname + " " + userInformation.Surname;
            currentApplicantPaymentLog.UserId = userId;

            
        }

        _loading = false;








    }

    
private async Task OnPaymentClickAsync()
{
    if (userId == null)
    {
        snackBar.Add("User not authenticated", Severity.Error);
        return;
    }

    paymentModel.merchantId = "2268484533";
    paymentModel.apiKey = "018543";
    paymentModel.responseurl = Navigation.BaseUri + "Payment/ProcessTransactionLogReceipt1";

    if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Collaborated && string.IsNullOrEmpty(BTHBACenterName))
    {
        snackBar.Add("Please Provide Center Name", Severity.Error);
        return;
    }

    @* if (BTHBAConversionCategoryInput == BTHBAConversionCategory.None)
    {
        snackBar.Add("Please Provide Conversion Category", Severity.Error);
        return;
    } *@
  if (name == "Agricultural Economics")
{
    if (AgriculturalEconomicsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Agricultural Economics", Severity.Error);
        return;
    }
}

if (name == "Agricultural Extension")
{
    if (AgriculturalExtensionPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Agricultural Extension", Severity.Error);
        return;
    }
}

if (name == "Crop Science")
{
    if (CropSciencePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Crop Science", Severity.Error);
        return;
    }
}

if (name == "Animal Science")
{
    if (AnimalSciencePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Animal Science", Severity.Error);
        return;
    }
}

if (name == "Environmental Health Science")
{
    if (EnvironmentalHealthSciencePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Environmental Health Science", Severity.Error);
        return;
    }
}

if (name == "Medical Laboratory Science")
{
    if (MedicalLaboratorySciencePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Medical Laboratory Science", Severity.Error);
        return;
    }
}

if (name == "Nursing")
{
    if (NursingPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Nursing", Severity.Error);
        return;
    }
}

if (name == "Radiography and radiation Science")
{
    if (RadiographyPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Radiography and radiation Science", Severity.Error);
        return;
    }
}

if (name == "Mass Communication")
{
    if (MassCommunicationPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Mass Communication", Severity.Error);
        return;
    }
}

 if (name == "Library and Information Science")
{
    if (LibraryInfoSciencePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Library and Information Science", Severity.Error);
        return;
    }
}

if (name == "Business Education")
{
    if (BusinessEducationPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Business Education", Severity.Error);
        return;
    }
}

if (name == "Economics Education")
{
    if (EconomicsEducationPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Economics Education", Severity.Error);
        return;
    }
}

if (name == "English Education")
{
    if (EnglishEducationPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for English Education", Severity.Error);
        return;
    }
}

if (name == "Guidance and Counseling")
{
    if (GuidanceCounselingPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Guidance and Counseling", Severity.Error);
        return;
    }
}

if (name == "Computer Education")
{
    if (ComputerEducationPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Computer Education", Severity.Error);
        return;
    }
}

if (name == "Civil Engineering")
{
    if (CivilEngineeringPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Civil Engineering", Severity.Error);
        return;
    }
}

if (name == "Computer Engineering")
{
    if (ComputerEngineeringPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Computer Engineering", Severity.Error);
        return;
    }
}

if (name == "Electrical Electronics Engineering")
{
    if (ElectricalEngineeringPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Electrical Electronics Engineering", Severity.Error);
        return;
    }
}

if (name == "Mechanical Engineering")
{
    if (MechanicalEngineeringPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Mechanical Engineering", Severity.Error);
        return;
    }
}

if (name == "Architecture")
{
    if (ArchitecturePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Architecture", Severity.Error);
        return;
    }
}

if (name == "Estate Management")
{
    if (EstateManagementPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Estate Management", Severity.Error);
        return;
    }
}

if (name == "English")
{
    if (EnglishPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for English", Severity.Error);
        return;
    }
}

if (name == "History & International Studies")
{
    if (HistoryInternationalPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for History & International Studies", Severity.Error);
        return;
    }
}

if (name == "Performing Arts")
{
    if (PerformingArtsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Performing Arts", Severity.Error);
        return;
    }
}

if (name == "Religious Studies")
{
    if (ReligiousStudiesPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Religious Studies", Severity.Error);
        return;
    }
}

if (name == "Law")
{
    if (LawPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Law", Severity.Error);
        return;
    }
}

if (name == "Accounting")
{
    if (AccountingPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Accounting", Severity.Error);
        return;
    }
}

if (name == "Banking and Finance")
{
    if (BankingFinancePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Banking and Finance", Severity.Error);
        return;
    }
}

if (name == "Business Administration")
{
    if (BusinessAdminPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Business Administration", Severity.Error);
        return;
    }
}

if (name == "Industrial Relations and Personnel Management")
{
    if (IndustrialRelationsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Industrial Relations and Personnel Management", Severity.Error);
        return;
    }
}

if (name == "Computer Science")
{
    if (ComputerSciencePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Computer Science", Severity.Error);
        return;
    }
}

if (name == "Computer Science(ICT Option)")
{
    if (ComputerScienceICTPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Computer Science (ICT Option)", Severity.Error);
        return;
    }
}

if (name == "Industrial Chemistry")
{
    if (IndustrialChemistryPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Industrial Chemistry", Severity.Error);
        return;
    }
}

if (name == "Physics")
{
    if (PhysicsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Physics", Severity.Error);
        return;
    }
}

if (name == "Geology")
{
    if (GeologyPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Geology", Severity.Error);
        return;
    }
}

if (name == "Microbiology")
{
    if (MicrobiologyPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Microbiology", Severity.Error);
        return;
    }
}

if (name == "Biochemistry")
{
    if (BiochemistryPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Biochemistry", Severity.Error);
        return;
    }
}

if (name == "Mathematics")
{
    if (MathematicsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Mathematics", Severity.Error);
        return;
    }
}

if (name == "Statistics")
{
    if (StatisticsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Statistics", Severity.Error);
        return;
    }
}

if (name == "Economics")
{
    if (EconomicsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Economics", Severity.Error);
        return;
    }
}

if (name == "Political Science")
{
    if (PoliticalSciencePayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Political Science", Severity.Error);
        return;
    }
}

if (name == "Peace Studies and Conflict Resolution")
{
    if (PeaceStudiesPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Peace Studies and Conflict Resolution", Severity.Error);
        return;
    }
}

if (name == "Surveying and Geoinformatics")
{
    if (SurveyingGeoinformaticsPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Surveying and Geoinformatics", Severity.Error);
        return;
    }
}

if (name == "Music")
{
    if (MusicPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Music", Severity.Error);
        return;
    }
}

if (name == "Entrepreneurship")
{
    if (EntrepreneurshipPayplan == PayPlan.NotPaid)
    {
        snackBar.Add("Please Select Pay Plan for Entrepreneurship", Severity.Error);
        return;
    }
}



    var currentSessionList = await currentAcademicSession.GetActiveApplicantSession();
    var currentSession = currentSessionList.FirstOrDefault();

    currentApplicantPaymentLog = new ApplicantPaymentLogDto
    {
        ReferenceNo = paymentModel.orderId,
        Amount = paymentModel.amount,
        email = paymentModel.payerEmail,
        client_name = paymentModel.payerName,
        RRRRNo = "",
        isSuccessful = false,
        UserId = userId,
        SessionId = currentSession?.Id
    };

    if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Collaborated && !string.IsNullOrEmpty(BTHBACenterName))
    {
        await ProcessCollaboratedPayment();
    }
    else if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Independent)
    {
        await ProcessIndependentPayment();
    }
    // Payment processing logic for all courses
if (name == "Law")
{
    if (LawPayplan == PayPlan.Full)
    {
        await ProcessLawfullPayment();
    }
    else if (LawPayplan == PayPlan.FirstInstalment)
    {
        await ProcessLawfirstinstalmentPayment();
    }
}
else if (name == "Agricultural Economics")
{
    if (AgriculturalEconomicsPayplan == PayPlan.Full)
    {
        await ProcessAgriculturalEconomicsFullPayment();
    }
    else if (AgriculturalEconomicsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessAgriculturalEconomicsFirstInstallmentPayment();
    }
}
else if (name == "Agricultural Extension")
{
    if (AgriculturalExtensionPayplan == PayPlan.Full)
    {
        await ProcessAgriculturalExtensionFullPayment();
    }
    else if (AgriculturalExtensionPayplan == PayPlan.FirstInstalment)
    {
        await ProcessAgriculturalExtensionFirstInstallmentPayment();
    }
}
 else if (name == "Crop Science")
{
    if (CropSciencePayplan == PayPlan.Full)
    {
        await ProcessCropScienceFullPayment();
    }
    else if (CropSciencePayplan == PayPlan.FirstInstalment)
    {
        await ProcessCropScienceFirstInstalmentPayment();
    }
} 
else if (name == "Animal Science")
{
    if (AnimalSciencePayplan == PayPlan.Full)
    {
        await ProcessAnimalScienceFullPayment();
    }
    else if (AnimalSciencePayplan == PayPlan.FirstInstalment)
    {
        await ProcessAnimalScienceFirstInstalmentPayment();
    }
}
else if (name == "Environmental Health Science")
{
    if (EnvironmentalHealthSciencePayplan == PayPlan.Full)
    {
        await ProcessEnvironmentalHealthScienceFullPayment();
    }
    else if (EnvironmentalHealthSciencePayplan == PayPlan.FirstInstalment)
    {
        await ProcessEnvironmentalHealthScienceFirstInstallmentPayment();
    }
}
else if (name == "Medical Laboratory Science")
{
    if (MedicalLaboratorySciencePayplan == PayPlan.Full)
    {
        await ProcessMedicalLaboratoryScienceFullPayment();
    }
    else if (MedicalLaboratorySciencePayplan == PayPlan.FirstInstalment)
    {
        await ProcessMedicalLaboratoryScienceFirstInstallmentPayment();
    }
}
else if (name == "Nursing")
{
    if (NursingPayplan == PayPlan.Full)
    {
        await ProcessNursingFullPayment();
    }
    else if (NursingPayplan == PayPlan.FirstInstalment)
    {
        await ProcessNursingFirstInstallmentPayment();
    }
}
else if (name == "Radiography and radiation Science")
{
    if (RadiographyPayplan == PayPlan.Full)
    {
        await ProcessRadiographyAndRadiationScienceFullPayment();
    }
    else if (RadiographyPayplan == PayPlan.FirstInstalment)
    {
        await ProcessRadiographyAndRadiationScienceFirstInstallmentPayment ();
    }
}
else if (name == "Mass Communication")
{
    if (MassCommunicationPayplan == PayPlan.Full)
    {
        await ProcessMassCommunicationFullPayment();
    }
    else if (MassCommunicationPayplan == PayPlan.FirstInstalment)
    {
        await ProcessMassCommunicationFirstInstallmentPayment();
    }
}
else if (name == "Library and Information Science")
{
    if (LibraryInfoSciencePayplan == PayPlan.Full)
    {
        await ProcessLibraryAndInformationScienceFullPayment();
    }
    else if (LibraryInfoSciencePayplan == PayPlan.FirstInstalment)
    {
        await ProcessLibraryAndInformationScienceFirstInstallmentPayment();
    }
}
else if (name == "Business Education")
{
    if (BusinessEducationPayplan == PayPlan.Full)
    {
        await ProcessBusinessEducationFullPayment();
    }
    else if (BusinessEducationPayplan == PayPlan.FirstInstalment)
    {
        await ProcessBusinessEducationFirstInstallmentPayment();
    }
}
else if (name == "Economics Education")
{
    if (EconomicsEducationPayplan == PayPlan.Full)
    {
        await ProcessEconomicsEducationFullPayment();
    }
    else if (EconomicsEducationPayplan == PayPlan.FirstInstalment)
    {
        await ProcessEconomicsEducationFirstInstalmentPayment();
    }
}
else if (name == "English Education")
{
    if (EnglishEducationPayplan == PayPlan.Full)
    {
        await ProcessEnglishEducationFullPayment();
    }
    else if (EnglishEducationPayplan == PayPlan.FirstInstalment)
    {
        await ProcessEnglishEducationFirstInstalmentPayment();
    }
}
else if (name == "Guidance and Counseling")
{
    if (GuidanceCounselingPayplan == PayPlan.Full)
    {
        await ProcessGuidanceCounselingFullPayment();
    }
    else if (GuidanceCounselingPayplan == PayPlan.FirstInstalment)
    {
        await ProcessGuidanceCounselingFirstInstalmentPayment();
    }
}
else if (name == "Computer Education")
{
    if (ComputerEducationPayplan == PayPlan.Full)
    {
        await ProcessComputerEducationFullPayment();
    }
    else if (ComputerEducationPayplan == PayPlan.FirstInstalment)
    {
        await ProcessComputerEducationFirstInstalmentPayment();
    }
}
else if (name == "Civil Engineering")
{
    if (CivilEngineeringPayplan == PayPlan.Full)
    {
        await ProcessCivilEngineeringFullPayment();
    }
    else if (CivilEngineeringPayplan == PayPlan.FirstInstalment)
    {
        await ProcessCivilEngineeringFirstInstallmentPayment();
    }
}
else if (name == "Computer Engineering")
{
    if (ComputerEngineeringPayplan == PayPlan.Full)
    {
        await ProcessComputerEngineeringFullPayment();
    }
    else if (ComputerEngineeringPayplan == PayPlan.FirstInstalment)
    {
        await ProcessComputerEngineeringFirstInstalmentPayment();
    }
}
else if (name == "Electrical Electronics Engineering")
{
    if (ElectricalEngineeringPayplan == PayPlan.Full)
    {
        await ProcessElectricalEngineeringFullPayment();
    }
    else if (ElectricalEngineeringPayplan == PayPlan.FirstInstalment)
    {
        await ProcessElectricalEngineeringFirstInstalmentPayment();
    }
}
else if (name == "Mechanical Engineering")
{
    if (MechanicalEngineeringPayplan == PayPlan.Full)
    {
        await ProcessMechanicalEngineeringFullPayment();
    }
    else if (MechanicalEngineeringPayplan == PayPlan.FirstInstalment)
    {
        await ProcessMechanicalEngineeringFirstInstalmentPayment();
    }
}
else if (name == "Architecture")
{
    if (ArchitecturePayplan == PayPlan.Full)
    {
        await ProcessArchitectureFullPayment();
    }
    else if (ArchitecturePayplan == PayPlan.FirstInstalment)
    {
        await ProcessArchitectureFirstInstallmentPayment();
    }
}
else if (name == "Estate Management")
{
    if (EstateManagementPayplan == PayPlan.Full)
    {
        await ProcessEstateManagementFullPayment();
    }
    else if (EstateManagementPayplan == PayPlan.FirstInstalment)
    {
        await ProcessEstateManagementFirstInstallmentPayment();
    }
}
else if (name == "History & International Studies")
{
    if (HistoryInternationalPayplan == PayPlan.Full)
    {
        await ProcessHistoryAndInternationalStudiesFullPayment();
    }
    else if (HistoryInternationalPayplan == PayPlan.FirstInstalment)
    {
        await ProcessHistoryAndInternationalStudiesFirstInstallmentPayment();
    }
}
else if (name == "English")
{
    if (EnglishPayplan == PayPlan.Full)
    {
        await ProcessEnglishFullPayment();
    }
    else if (EnglishPayplan == PayPlan.FirstInstalment)
    {
        await ProcessEnglishFirstInstallmentPayment();
    }
}
else if (name == "Performing Arts")
{
    if (PerformingArtsPayplan == PayPlan.Full)
    {
        await ProcessPerformingArtsFullPayment();
    }
    else if (PerformingArtsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessPerformingArtsFirstInstallmentPayment();
    }
}
else if (name == "Religious Studies")
{
    if (ReligiousStudiesPayplan == PayPlan.Full)
    {
        await ProcessReligiousStudiesFullPayment();
    }
    else if (ReligiousStudiesPayplan == PayPlan.FirstInstalment)
    {
        await ProcessReligiousStudiesFirstInstalmentPayment();
    }
}
else if (name == "Accounting")
{
    if (AccountingPayplan == PayPlan.Full)
    {
        await ProcessAccountingFullPayment();
    }
    else if (AccountingPayplan == PayPlan.FirstInstalment)
    {
        await ProcessAccountingFirstInstallmentPayment();
    }
}
else if (name == "Banking and Finance")
{
    if (BankingFinancePayplan == PayPlan.Full)
    {
        await ProcessBankingFinanceFullPayment();
    }
    else if (BankingFinancePayplan == PayPlan.FirstInstalment)
    {
        await ProcessBankingFinanceFirstInstalmentPayment();
    }
}
else if (name == "Business Administration")
{
    if (BusinessAdminPayplan == PayPlan.Full)
    {
        await ProcessBusinessAdminFullPayment();
    }
    else if (BusinessAdminPayplan == PayPlan.FirstInstalment)
    {
        await ProcessBusinessAdminFirstInstalmentPayment();
    }
}
else if (name == "Industrial Relations and Personnel Management")
{
    if (IndustrialRelationsPayplan == PayPlan.Full)
    {
        await ProcessIndustrialRelationsFullPayment();
    }
    else if (IndustrialRelationsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessIndustrialRelationsFirstInstalmentPayment();
    }
}
else if (name == "Computer Science")
{
    if (ComputerSciencePayplan == PayPlan.Full)
    {
        await ProcessComputerScienceFullPayment();
    }
    else if (ComputerSciencePayplan == PayPlan.FirstInstalment)
    {
        await ProcessComputerScienceFirstInstalmentPayment();
    }
}
else if (name == "Computer Science(ICT Option)")
{
    if (ComputerScienceICTPayplan == PayPlan.Full)
    {
        await ProcessComputerScienceICTFullPayment();
    }
    else if (ComputerScienceICTPayplan == PayPlan.FirstInstalment)
    {
        await ProcessComputerScienceICTFirstInstalmentPayment();
    }
}
else if (name == "Industrial Chemistry")
{
    if (IndustrialChemistryPayplan == PayPlan.Full)
    {
        await ProcessIndustrialChemistryFullPayment();
    }
    else if (IndustrialChemistryPayplan == PayPlan.FirstInstalment)
    {
        await ProcessIndustrialChemistryFirstInstalmentPayment();
    }
}
else if (name == "Physics")
{
    if (PhysicsPayplan == PayPlan.Full)
    {
        await ProcessPhysicsFullPayment();
    }
    else if (PhysicsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessPhysicsFirstInstalmentPayment();
    }
}
else if (name == "Geology")
{
    if (GeologyPayplan == PayPlan.Full)
    {
        await ProcessGeologyFullPayment();
    }
    else if (GeologyPayplan == PayPlan.FirstInstalment)
    {
        await ProcessGeologyFirstInstalmentPayment();
    }
}
else if (name == "Microbiology")
{
    if (MicrobiologyPayplan == PayPlan.Full)
    {
        await ProcessMicrobiologyFullPayment();
    }
    else if (MicrobiologyPayplan == PayPlan.FirstInstalment)
    {
        await ProcessMicrobiologyFirstInstalmentPayment();
    }
}
else if (name == "Biochemistry")
{
    if (BiochemistryPayplan == PayPlan.Full)
    {
        await ProcessBiochemistryFullPayment();
    }
    else if (BiochemistryPayplan == PayPlan.FirstInstalment)
    {
        await ProcessBiochemistryFirstInstalmentPayment();
    }
}
else if (name == "Mathematics")
{
    if (MathematicsPayplan == PayPlan.Full)
    {
        await ProcessMathematicsFullPayment();
    }
    else if (MathematicsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessMathematicsFirstInstalmentPayment();
    }
}
else if (name == "Statistics")
{
    if (StatisticsPayplan == PayPlan.Full)
    {
        await ProcessStatisticsFullPayment();
    }
    else if (StatisticsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessStatisticsFirstInstalmentPayment();
    }
}
else if (name == "Economics")
{
    if (EconomicsPayplan == PayPlan.Full)
    {
        await ProcessEconomicsFullPayment();
    }
    else if (EconomicsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessEconomicsFirstInstalmentPayment();
    }
}
else if (name == "Political Science")
{
    if (PoliticalSciencePayplan == PayPlan.Full)
    {
        await ProcessPoliticalScienceFullPayment();
    }
    else if (PoliticalSciencePayplan == PayPlan.FirstInstalment)
    {
        await ProcessPoliticalScienceFirstInstalmentPayment();
    }
}
else if (name == "Peace Studies and Conflict Resolution")
{
    if (PeaceStudiesPayplan == PayPlan.Full)
    {
        await ProcessPeaceStudiesFullPayment();
    }
    else if (PeaceStudiesPayplan == PayPlan.FirstInstalment)
    {
        await ProcessPeaceStudiesFirstInstalmentPayment();
    }
}
else if (name == "Surveying and Geoinformatics")
{
    if (SurveyingGeoinformaticsPayplan == PayPlan.Full)
    {
        await ProcessSurveyingGeoinformaticsFullPayment();
    }
    else if (SurveyingGeoinformaticsPayplan == PayPlan.FirstInstalment)
    {
        await ProcessSurveyingGeoinformaticstFirstInstalmentPayment();
    }
}
else if (name == "Music")
{
    if (MusicPayplan == PayPlan.Full)
    {
        await ProcessMusicFullPayment();
    }
    else if (MusicPayplan == PayPlan.FirstInstalment)
    {
        await ProcessMusicFirstInstallmentPayment();
    }
}
else if (name == "Entrepreneurship")
{
    if (EntrepreneurshipPayplan == PayPlan.Full)
    {
        await ProcessEntrepreneurshipFullPayment();
    }
    else if (EntrepreneurshipPayplan == PayPlan.FirstInstalment)
    {
        await ProcessEntrepreneurshipfirstinstallmentPayment();
    }
}

    // Save the payment log
    var paymentInfo = await paymentRepository.CreateApplicantPayment(currentApplicantPaymentLog);

    // Submit the form
    await jsRuntime.InvokeVoidAsync("submitForm", "remitaForm");
}

private async Task ProcessLawfullPayment(){
    // Process the payment for full payment plan
    paymentModel.amount = lawPayDetails.Amount;
      paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Law/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
  
  currentApplicantPaymentLog.ApplicantPayCategoryId = lawPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = lawPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Law 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
   
   var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

     ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);

    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
      currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessLawfirstinstalmentPayment(){
    // Process the payment for full payment plan
    paymentModel.amount = lawPayDetails1.Amount;
      paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Law/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
  
  currentApplicantPaymentLog.ApplicantPayCategoryId = lawPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = lawPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Law 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
   
   var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

     ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);

    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
      currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}



private async Task ProcessAgriculturalEconomicsFullPayment()
{
    paymentModel.amount = agriculturalPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/AEE/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Agricultural Economics 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessAgriculturalEconomicsFirstInstallmentPayment()
{
    paymentModel.amount = agriculturalPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/AEE/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Agricultural Economics 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

// ... (similar functions for all other courses)

private async Task ProcessEntrepreneurshipFullPayment()
{
    paymentModel.amount = entrepreneurshipPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Entrepreneurship/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = entrepreneurshipPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = entrepreneurshipPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Entrepreneurship 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEntrepreneurshipfirstinstallmentPayment()
{
    paymentModel.amount = entrepreneurshipPayDetails1.Amount;
      paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Law/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
  
  currentApplicantPaymentLog.ApplicantPayCategoryId = entrepreneurshipPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = entrepreneurshipPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Law 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
   
   var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

     ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);

    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
      currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessAgriculturalExtensionFullPayment()
{
    paymentModel.amount = agriculturalPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/AEE/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Agricultural Extension 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessAgriculturalExtensionFirstInstallmentPayment()
{
    paymentModel.amount = agriculturalPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/AEE/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Agricultural Extension 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessReligiousStudiesFullPayment()
{
    paymentModel.amount = agriculturalPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/ReligiousStudies/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Religious Studies 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessReligiousStudiesFirstInstalmentPayment()
{
    paymentModel.amount = agriculturalPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/ReligiousStudies/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Religious Studies 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEnvironmentalHealthScienceFullPayment()
{
    paymentModel.amount = ehsPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EHS/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = ehsPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = ehsPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Environmental Health Science 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEnvironmentalHealthScienceFirstInstallmentPayment()
{
    paymentModel.amount = ehsPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EHS/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = ehsPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = ehsPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Environmental Health Science 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMedicalLaboratoryScienceFullPayment()
{
    paymentModel.amount = mlsPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/MLS/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = mlsPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = mlsPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Medical Laboratory Science 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMedicalLaboratoryScienceFirstInstallmentPayment()
{
    paymentModel.amount = mlsPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/MLS/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = mlsPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = mlsPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Medical Laboratory Science 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessNursingFullPayment()
{
    paymentModel.amount = nursingPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Nursing/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = nursingPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = nursingPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Nursing 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessNursingFirstInstallmentPayment()
{
    paymentModel.amount = nursingPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Nursing/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = nursingPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = nursingPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Nursing 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessRadiographyAndRadiationScienceFullPayment()
{
    paymentModel.amount = rrrPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/RRR/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = rrrPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = rrrPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Radiography and radiation Science 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessRadiographyAndRadiationScienceFirstInstallmentPayment()
{
    paymentModel.amount = rrrPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/RRR/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = rrrPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = rrrPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Radiography and radiation Science 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

// ... (continue with similar functions for all other courses)

private async Task ProcessMusicFullPayment()
{
    paymentModel.amount = musicPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Music/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = musicPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = musicPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Music 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMusicFirstInstallmentPayment()
{
    paymentModel.amount = musicPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Music/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = musicPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = musicPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Music 100 LEVEL First Installment Tuition{currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessPhysicsFullPayment()
{
    paymentModel.amount = musicPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Physics/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = musicPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = musicPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Physics 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessPhysicsFirstInstalmentPayment()
{
    paymentModel.amount = musicPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Physics/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = musicPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = musicPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Physics 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMassCommunicationFullPayment()
{
    paymentModel.amount = cmsPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/MassCommunication/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = cmsPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = cmsPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Mass Communication 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMassCommunicationFirstInstallmentPayment()
{
    paymentModel.amount = cmsPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/MassCommunication/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = cmsPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = cmsPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Mass Communication 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessGeologyFullPayment()
{
    paymentModel.amount = geoPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Geology/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = geoPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = geoPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Geology 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessGeologyFirstInstalmentPayment()
{
    paymentModel.amount = geoPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Geology/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = geoPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = geoPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Geology 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessLibraryAndInformationScienceFullPayment()
{
    paymentModel.amount = lisPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/LIS/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = lisPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = lisPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Library and Information Science 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessLibraryAndInformationScienceFirstInstallmentPayment()
{
    paymentModel.amount = lisPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/LIS/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = lisPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = lisPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Library and Information Science 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessPeaceStudiesFullPayment()
{
    paymentModel.amount = lisPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/PSCR/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = lisPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = lisPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Peace Studies and Conflict Resolution 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessPeaceStudiesFirstInstalmentPayment()
{
    paymentModel.amount = lisPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/PSCR/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = lisPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = lisPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"PSCR 100 LEVEL First Installment Tuition{currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
@* private async Task ProcessPeaceStudiesFirstInstalmentPayment()
{
    paymentModel.amount = lisPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/PSCR/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = lisPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = lisPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"PSCR 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
} *@

private async Task ProcessBusinessEducationFullPayment()
{
    paymentModel.amount = educationPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/BusinessEducation/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Business Education 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessBusinessEducationFirstInstallmentPayment()
{
    paymentModel.amount = educationPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/BusinessEducation/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Business Education 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessSurveyingGeoinformaticsFullPayment()
{
     paymentModel.amount = surveryPayDetail.Amount;
      paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/SVG/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
  
  currentApplicantPaymentLog.ApplicantPayCategoryId = surveryPayDetail.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = surveryPayDetail.Id;
    currentApplicantPaymentLog.Comments = $"Surveying 100 LEVEL Full Tuition{currentSession.FirstOrDefault()?.Name}";
   
   var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

     ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);

    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
      currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessSurveyingGeoinformaticstFirstInstalmentPayment()
{
     paymentModel.amount = surveryPayDetail1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/SVG/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = surveryPayDetail1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = surveryPayDetail1.Id;
    currentApplicantPaymentLog.Comments = $"Surveying 100 LEVEL First Installment Tuition{currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessGuidanceCounselingFullPayment()
{
    paymentModel.amount = educationPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/GCE/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Guidance and Counseling 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessGuidanceCounselingFirstInstalmentPayment()
{
    paymentModel.amount = educationPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/GCE/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Guidance and Counseling 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessComputerEducationFullPayment()
{
    paymentModel.amount = educationPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/ComputerEducation/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Computer Education 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessComputerEducationFirstInstalmentPayment()
{
    paymentModel.amount = educationPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/ComputerEducation/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Computer Education 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessEnglishEducationFullPayment()
{
    paymentModel.amount = educationPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EnglishEducation/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"English Education 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEnglishEducationFirstInstalmentPayment()
{
    paymentModel.amount = educationPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EnglishEducation/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"English Education 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEconomicsEducationFullPayment()
{
    paymentModel.amount = educationPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EconomicsEdu./{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Economics Education 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEconomicsEducationFirstInstalmentPayment()
{
    paymentModel.amount = educationPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EconomicsEdu./First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = educationPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = educationPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Economics Education 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessCivilEngineeringFullPayment()
{
    paymentModel.amount = engineeringPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CivilEngineering/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Civil Engineering 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessCivilEngineeringFirstInstallmentPayment()
{
    paymentModel.amount = engineeringPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CivilEngineering/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Civil Engineering 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessComputerEngineeringFullPayment()
{
    paymentModel.amount = engineeringPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CEE/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Computer Engineering 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessComputerEngineeringFirstInstalmentPayment()
{
    paymentModel.amount = engineeringPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CEE/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Computer Engineering 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessElectricalEngineeringFullPayment()
{
    paymentModel.amount = engineeringPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EEE/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Electrical Electronics Engineering 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessElectricalEngineeringFirstInstalmentPayment()
{
    paymentModel.amount = engineeringPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EEE/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Electrical Electronics Engineering 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMechanicalEngineeringFullPayment()
{
    paymentModel.amount = engineeringPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/MEE/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Mechanical Engineering Engineering 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMechanicalEngineeringFirstInstalmentPayment()
{
    paymentModel.amount = engineeringPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/MEE/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Mechanical Engineering Engineering 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessComputerScienceFullPayment()
{
    paymentModel.amount = engineeringPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Computer Science/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Computer Science 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessComputerScienceFirstInstalmentPayment()
{
    paymentModel.amount = engineeringPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Computer Science/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Computer Science 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessComputerScienceICTFullPayment()
{
    paymentModel.amount = engineeringPayplanPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CSC(ICT Option)/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Computer Science(ICT Option) 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessComputerScienceICTFirstInstalmentPayment()
{
    paymentModel.amount = engineeringPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CSC(ICT Option)/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = engineeringPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = engineeringPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Computer Science(ICT Option) 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessIndustrialChemistryFullPayment()
{
    paymentModel.amount = bioPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/IC/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = bioPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = bioPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Industrial Chemistry 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessIndustrialChemistryFirstInstalmentPayment()
{
    paymentModel.amount = bioPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/IC/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = bioPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = bioPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Industrial Chemistry  100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessBiochemistryFullPayment()
{
    paymentModel.amount = bioPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Biochemistry/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = bioPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = bioPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Biochemistry 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessBiochemistryFirstInstalmentPayment()
{
    paymentModel.amount = bioPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Biochemistry/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = bioPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = bioPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Biochemistry 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMathematicsFullPayment()
{
    paymentModel.amount = mthPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Mathematics/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = mthPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = mthPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Mathematics 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMathematicsFirstInstalmentPayment()
{
    paymentModel.amount = mthPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Mathematics/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = mthPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = mthPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Mathematics 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessStatisticsFullPayment()
{
    paymentModel.amount = mthPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Statistics/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = mthPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = mthPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Statistics 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessStatisticsFirstInstalmentPayment()
{
    paymentModel.amount = mthPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Statistics/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = mthPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = mthPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Statistics 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}


private async Task ProcessMicrobiologyFullPayment()
{
    paymentModel.amount = busPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Microbiology/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = busPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = busPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Microbiology 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessMicrobiologyFirstInstalmentPayment()
{
    paymentModel.amount = busPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Microbiology/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = busPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = busPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Microbiology 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEconomicsFullPayment()
{
    paymentModel.amount = busPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Economics/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = busPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = busPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Economics 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEconomicsFirstInstalmentPayment()
{
    paymentModel.amount = busPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Economics/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = busPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = busPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Economics 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}



private async Task ProcessArchitectureFullPayment()
{
    paymentModel.amount = architecturePayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Architecture/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = architecturePayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = architecturePayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Architecture 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessArchitectureFirstInstallmentPayment()
{
    paymentModel.amount = architecturePayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Architecture/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = architecturePayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = architecturePayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Architecture 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEstateManagementFullPayment()
{
    paymentModel.amount = estPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EstateManagement/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = estPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = estPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Estate Management 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEstateManagementFirstInstallmentPayment()
{
    paymentModel.amount = estPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/EstateManagement/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = estPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = estPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Estate Management 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessHistoryAndInternationalStudiesFullPayment()
{
    paymentModel.amount = hisPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/HIS/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = hisPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = hisPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"History & International Studies 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessHistoryAndInternationalStudiesFirstInstallmentPayment()
{
    paymentModel.amount = hisPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/HIS/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = hisPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = hisPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"History & International Studies 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessPoliticalScienceFullPayment()
{
    paymentModel.amount = hisPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/PoliticalScience/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = hisPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = hisPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Political Science 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessPoliticalScienceFirstInstalmentPayment()
{
    paymentModel.amount = hisPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/PoliticalScience/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = hisPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = hisPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Political Science 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEnglishFullPayment()
{
    paymentModel.amount = englishPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/English/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = englishPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = englishPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"English 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessEnglishFirstInstallmentPayment()
{
    paymentModel.amount = englishPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/English/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = englishPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = englishPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"English 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessPerformingArtsFullPayment()
{
    paymentModel.amount = pfaPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/PerformingArts/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = pfaPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = pfaPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Performing Arts 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessPerformingArtsFirstInstallmentPayment()
{
    paymentModel.amount = pfaPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/PerformingArts/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = pfaPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = pfaPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Performing Arts 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessAccountingFullPayment()
{
    paymentModel.amount = accPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Accounting/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = accPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = accPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Accounting 100 LEVEL Full  Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task ProcessAccountingFirstInstallmentPayment()
{
    paymentModel.amount = accPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Accounting/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = accPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = accPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Accounting 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;  
}

private async Task ProcessCropScienceFirstInstalmentPayment()
{
    paymentModel.amount = agriculturalPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CropScience/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"CropScience 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;  
}

private async Task ProcessCropScienceFullPayment(){
     paymentModel.amount = agriculturalPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/CropScience/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"CropScience 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;  
}

private async Task ProcessAnimalScienceFullPayment(){
     paymentModel.amount = agriculturalPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/Animal Science/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Animal Science 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}
private async Task ProcessAnimalScienceFirstInstalmentPayment(){
     paymentModel.amount = agriculturalPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/AnimalScience/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = agriculturalPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = agriculturalPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Animal Science 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}
private async Task ProcessBankingFinanceFirstInstalmentPayment(){
     paymentModel.amount = bafPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/BankingFinance/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = bafPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = bafPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Banking and Finance 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}
private async Task ProcessBankingFinanceFullPayment(){
     paymentModel.amount = bafPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/BankingFinance/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = bafPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = bafPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Banking and Finance 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}

private async Task ProcessBusinessAdminFullPayment(){
     paymentModel.amount = busPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/BusinessAdmin/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = busPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = busPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Business Administration 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}
private async Task ProcessBusinessAdminFirstInstalmentPayment(){
     paymentModel.amount = busPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/BusinessAdmin/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = busPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = busPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Business Administration 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}

private async Task ProcessIndustrialRelationsFullPayment(){
     paymentModel.amount = inrPayplanPayDetails.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/IRPM/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = inrPayplanPayDetails.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = inrPayplanPayDetails.Id;
    currentApplicantPaymentLog.Comments = $"Industrial Relations and Personnel Management 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}
private async Task ProcessIndustrialRelationsFirstInstalmentPayment(){
     paymentModel.amount = inrPayplanPayDetails1.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/IRPM/First/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";
    
    currentApplicantPaymentLog.ApplicantPayCategoryId = inrPayplanPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = inrPayplanPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"Industrial Relations and Personnel Management 100 LEVEL First Installment Tuition {currentSession.FirstOrDefault()?.Name}";
    
    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    
    await applicationForm.UpdateApplicationForm(applicationFormDto);
    
    currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount; 
}


   private async Task ProcessCollaboratedPayment()
{
    paymentModel.amount = currentPayDetails1.Amount;
    string shortCenterName = ShortenCenterName(BTHBACenterName);
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/{shortCenterName}/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "9598875924";

    currentApplicantPaymentLog.ApplicantPayCategoryId = currentPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = currentPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"BTHBA Collaborated Full Tuition {currentSession.FirstOrDefault()?.Name}";

    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);

    applicationFormDto.BTHConversionCategory = BTHBAConversionCategory.Collaborated;
    applicationFormDto.BTHCenter = BTHBACenterName;
    await applicationForm.UpdateApplicationForm(applicationFormDto);
      currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessIndependentPayment()
{
    paymentModel.amount = currentPayDetails2.Amount;
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/NURSING/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "2267186704";

    currentApplicantPaymentLog.ApplicantPayCategoryId = currentPayDetails2.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = currentPayDetails2.Id;
    currentApplicantPaymentLog.Comments = $"NURSING 100 LEVEL Full Tuition {currentSession.FirstOrDefault()?.Name}";

    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    applicationFormDto.BTHConversionCategory = BTHBAConversionCategory.Independent;
    await applicationForm.UpdateApplicationForm(applicationFormDto);
       currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
private async Task OnHalfPaymentClickAsync()
{
    if (userId == null)
    {
        snackBar.Add("User not authenticated", Severity.Error);
        return;
    }

    paymentModel.merchantId = "2268484533";
    paymentModel.apiKey = "018543";
    paymentModel.responseurl = Navigation.BaseUri + "Payment/ProcessTransactionLogReceipt";

    if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Collaborated && string.IsNullOrEmpty(BTHBACenterName))
    {
        snackBar.Add("Please Provide Center Name", Severity.Error);
        return;
    }

    if (BTHBAConversionCategoryInput == BTHBAConversionCategory.None)
    {
        snackBar.Add("Please Provide Conversion Category", Severity.Error);
        return;
    }

    var currentSessionList = await currentAcademicSession.GetActiveApplicantSession();
    var currentSession = currentSessionList.FirstOrDefault();

    currentApplicantPaymentLog = new ApplicantPaymentLogDto
    {
        ReferenceNo = paymentModel.orderId,
        Amount = paymentModel.amount / 2, // Half payment
        email = paymentModel.payerEmail,
        client_name = paymentModel.payerName,
        RRRRNo = "",
        isSuccessful = false,
        UserId = userId,
        SessionId = currentSession?.Id
    };

    if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Collaborated && !string.IsNullOrEmpty(BTHBACenterName))
    {
        await ProcessHalfCollaboratedPayment();
    }
    else if (BTHBAConversionCategoryInput == BTHBAConversionCategory.Independent)
    {
        await ProcessHalfIndependentPayment();
    }

    // Save the payment log
    var paymentInfo = await paymentRepository.CreateApplicantPayment(currentApplicantPaymentLog);

    // Submit the form
    await jsRuntime.InvokeVoidAsync("submitForm", "remitaForm");
}

private async Task ProcessHalfCollaboratedPayment()
{
    paymentModel.amount = currentPayDetails1.Amount / 2; // Half payment
    string shortCenterName = ShortenCenterName(BTHBACenterName);
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/{shortCenterName}/HALF/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "9598875924";

    currentApplicantPaymentLog.ApplicantPayCategoryId = currentPayDetails1.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = currentPayDetails1.Id;
    currentApplicantPaymentLog.Comments = $"BTHBA Collaborated Half Tuition {currentSession.FirstOrDefault()?.Name}";

    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    applicationFormDto.BTHConversionCategory = BTHBAConversionCategory.Collaborated;
    applicationFormDto.BTHCenter = BTHBACenterName;
    await applicationForm.UpdateApplicationForm(applicationFormDto);
       currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}

private async Task ProcessHalfIndependentPayment()
{
    paymentModel.amount = currentPayDetails2.Amount / 2; // Half payment
    paymentModel.orderId = $"{currentApplicationForm.FormRefNo}/IND/HALF/{DateTime.Now:yyyyMMddHHmmss}";
    paymentModel.serviceTypeId = "9598875924";

    currentApplicantPaymentLog.ApplicantPayCategoryId = currentPayDetails2.ApplicantPayCategoryId;
    currentApplicantPaymentLog.ApplicantPayDetailsId = currentPayDetails2.Id;
    currentApplicantPaymentLog.Comments = $"BTHBA Independent Half Tuition {currentSession.FirstOrDefault()?.Name}";

    var hashString = paymentModel.merchantId + paymentModel.serviceTypeId + paymentModel.orderId + paymentModel.amount + paymentModel.responseurl + paymentModel.apiKey;
    using var sha512 = System.Security.Cryptography.SHA512.Create();
    var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
    paymentModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

    ApplicationFormDto applicationFormDto = await applicationForm.GetApplicationFormByUserId(userId);
    applicationFormDto.BTHConversionCategory = BTHBAConversionCategory.Independent;
    await applicationForm.UpdateApplicationForm(applicationFormDto);
       currentApplicationForm.ApplicantStage = ApplicationStage.Stage7;
    currentApplicantPaymentLog.ReferenceNo = paymentModel.orderId;
    currentApplicantPaymentLog.Amount = paymentModel.amount;
}
  private string ShortenCenterName(string centerName)
{
    // Split the center name by spaces and commas
    var words = centerName.Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries);
    
    // Take the first letter of each word, up to 5 letters
    var shortened = string.Join("", words.Take(5).Select(w => w[0]));
    
    // Ensure the result is uppercase
    return shortened.ToUpper();
}
    
    
    public class PaymentModel
    {
        public string payerName { get; set; }
        public string payerEmail { get; set; }
        public string payerPhone { get; set; }
        public decimal amount { get; set; }
        public string paymentType { get; set; }
        public string merchantId { get; set; }
        public string serviceTypeId { get; set; }
        public string orderId { get; set; }
        public string responseurl { get; set; }
        public string apiKey { get; set; }
        public string hash { get; set; }

    }

}
