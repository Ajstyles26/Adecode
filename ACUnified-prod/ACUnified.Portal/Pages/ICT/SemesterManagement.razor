@page "/ict/SemesterManagement"
@layout ACUnifiedLayout
@using ACUnified.Business.Repository.IRepository
@using ACUnified.Data.DTOs;
@inject ISnackbar snackBar
@inject ISemesterRepository SemesterService
@inject IDialogService DialogService
@attribute [Authorize(Roles = "ICT")]
<h3>Semester Management</h3>

<div class="ml-5 py-4">
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Semester</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="academicSemester.Name" Label=" Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
        <MudToggleIconButton @bind-Toggled="@academicSemester.isActive"
                     Icon="@Icons.Material.Filled.KeyOff" Color="@Color.Error" Title="Off"
                     ToggledIcon="@Icons.Material.Filled.Key" ToggledColor="@Color.Success" ToggledTitle="On"/>       
@* <MudTextField @bind-Value="programSetup.Faculty.Name" Label="Faculty Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField> *@
        @* <MudTextField @bind-Value="programSetup.Department.Name" Label="Department Name" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField> *@
        
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Academic Semester</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25"  Filter="new Func<SemesterDto, bool>(Search)" @bind-Items="academicSemesters">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Semester</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Semester..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @* <MudTh>Id</MudTh> *@
        <MudTh>Name</MudTh>
        <MudTh>IsActive</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        @* <MudTd DataLabel="Id">@context.Id</MudTd> *@
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Name">@context.isActive</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>OpenEditDialog(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>
</div>
@code{
    private string searchString = "";
    private SemesterDto academicSemester = new SemesterDto();
    private List<SemesterDto> academicSemesters = new List<SemesterDto>();
    protected override async Task OnInitializedAsync()
    {
        await GetAcademicSemesterAsync();
    }
    private async Task GetAcademicSemesterAsync()
    {
        academicSemesters = (await SemesterService.GetAllSemester()).ToList();

    }
    private bool Search(SemesterDto semesterSetup)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        return semesterSetup.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
    private async Task Save()
    {
        academicSemester.Description = "";
        await SemesterService.CreateSemester(academicSemester);
        academicSemester = new SemesterDto();
        snackBar.Add("Academic Semester Saved.", Severity.Success);
        await GetAcademicSemesterAsync();
    }
    private async Task Edit(long id)
    {
        academicSemester = await SemesterService.GetSemester(id);
    }
    private async Task Delete(long id)
    {
        //await SemesterService.DeleteSemester(id);
        snackBar.Add("Academic Semester Deleted.", Severity.Success);
        await GetAcademicSemesterAsync();
    }
    private async Task OpenEditDialog(long id)
    {
        var parameters = new DialogParameters { ["semesterDto"] = await SemesterService.GetSemester(id) };
        var dialog =  DialogService.Show<EditSemesterMgtDialog>("Edit Academic Semester", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await GetAcademicSemesterAsync();
        }

    }
}