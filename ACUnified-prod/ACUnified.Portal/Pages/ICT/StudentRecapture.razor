@page "/ict/biometricscapture"
@using System.Net.Http.Json
@using ACUnified.Data.DTOs
@using ACUnified.Data.Models
@layout ACUnifiedLayout  
@inject ISnackbar snackBar
@inject IStudentRepository studentRepository
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "ICT")]
<MudTable ServerData="@(new Func<TableState, Task<TableData<StudentDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Biometrics Capture</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Student">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="matric_field" T="Student">Matric</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="phone_field" T="Student">Phone</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortLabel="position_field" T="Student">Position</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortLabel="mass_field" T="Student">Molar mass</MudTableSortLabel></MudTh> *@
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <div @onclick="@(()=>NavigateToDetail(@context.Id))">@context.FirstName @context.OtherName @context.LastName</div>
        </MudTd>
        <MudTd DataLabel="Matric">@context.Matric</MudTd>
        <MudTd DataLabel="Phone">@context.MobileNumber</MudTd>
        @* <MudTd DataLabel="Position">@context.Position</MudTd> *@
        @* <MudTd DataLabel="Molar mass">@context.Molar</MudTd> *@
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

    @code {
    private IEnumerable<StudentDto> pagedData;
    private MudTable<StudentDto> table;
    private int totalItems;
    private string searchString = null;

    private IEnumerable<StudentDto> data;
    protected override async Task OnInitializedAsync()
    {
        await GetAllStudentsAsync();
    }

    private async Task GetAllStudentsAsync()
    {
        data = (await studentRepository.GetAllStudent()).ToList();
    }
    private async Task NavigateToDetail(long StudentId)
    {
        Navigation.NavigateTo($"/ict/biorecapture/{StudentId}");
    
    }


    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<StudentDto>> ServerReload(TableState state)
    {
        IEnumerable<StudentDto> data = (await studentRepository.GetAllStudent()).ToList();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Matric.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.MobileNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.LastName);
                break;
            case "matric_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Matric);
                break;
            case "phone_field":
                data = data.OrderByDirection(state.SortDirection, o => o.MobileNumber);
                break;
            // case "position_field":
            //     data = data.OrderByDirection(state.SortDirection, o => o.Position);
            //     break;
            // case "mass_field":
            //     data = data.OrderByDirection(state.SortDirection, o => o.Molar);
            //     break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<StudentDto>() {TotalItems = totalItems, Items = pagedData};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}