@page "/applicant/payment-portal"
@using ACUnified.Business.Repository.IRepository
@using ACUnified.Data.DTOs
@using ACUnified.Data.Enum
@using ACUnified.Data.Models 
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using System.Text.Json
@inject IApplicantDebtorListRepository Repository
@inject IApplicationFormRepository applicationForm
@inject IApplicantPaymentLogRepository paymentRepository
@inject IApplicantPayDetailsRepository payDetailsRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject UserManager<ApplicationUser> UserManager
@layout ACUnifiedLayout
@attribute [Authorize(Roles = "FreshApplicantDashboard")]

<PageTitle>Student Payment Portal</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Student Payment Portal</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        @if (isLoading)
        {
            <MudCardContent>
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                <MudText Align="Align.Center">Loading your payment information...</MudText>
            </MudCardContent>
        }
        else if (debtorRecord == null)
        {
            <MudCardContent>
                <MudAlert Severity="Severity.Info">
                    No payment information found. Please contact support if you believe this is an error.
                </MudAlert>
            </MudCardContent>
        }
        else
        {
            <MudCardContent>
                <!-- Payment Summary -->
                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudPaper Elevation="2" Class="pa-4">
                            <MudText Typo="Typo.subtitle1">Total Amount</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Primary">₦@debtorRecord.TotalAmount.ToString("N2")</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudPaper Elevation="2" Class="pa-4">
                            <MudText Typo="Typo.subtitle1">Amount Paid</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Success">₦@debtorRecord.TotalPaid.ToString("N2")</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudPaper Elevation="2" Class="pa-4">
                            <MudText Typo="Typo.subtitle1">Outstanding Amount</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Error">₦@debtorRecord.OutstandingAmount.ToString("N2")</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                @if (debtorRecord.OutstandingAmount > 0)
                {
                    @if (debtorRecord.PaymentPlan == PayPlan.FirstInstalment)
                    {
                        <MudItem xs="12" Class="mt-6">
                            <MudPaper Class="pa-4">
                                <MudText Typo="Typo.h6" Class="mb-4">Select Payment Plan</MudText>
                                <MudGrid>
                                    <MudItem xs="12" sm="6">
                                        <MudCard Elevation="3" Class="pa-4">
                                            <MudText Typo="Typo.h6">Full Payment</MudText>
                                            <MudText Class="mt-2">Pay the full outstanding amount at once</MudText>
                                            <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-4">
                                                ₦@debtorRecord.OutstandingAmount.ToString("N2")
                                            </MudText>
                                            <MudText Typo="Typo.caption">Due immediately</MudText>
                                            <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" 
                                                     Class="mt-4" OnClick="() => InitiatePayment(debtorRecord.OutstandingAmount, PayPlan.SecondThirdInstalment)">
                                                Pay Now
                                            </MudButton>
                                            

                                        </MudCard>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudCard Elevation="3" Class="pa-4">
                                            <MudText Typo="Typo.h6">Installment Payment</MudText>
                                            <MudText Class="mt-2">Split into two equal payments</MudText>
                                            <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mt-4">
                                                ₦@((debtorRecord.OutstandingAmount / 2).ToString("N2"))
                                            </MudText>
                                            <MudText Typo="Typo.caption">First payment due immediately</MudText>
                                            <MudText Typo="Typo.caption">Second payment due in 30 days</MudText>
                                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" FullWidth="true" 
                                                     Class="mt-4" OnClick="() => InitiatePayment(debtorRecord.OutstandingAmount / 2, PayPlan.SecondInstalment)">
                                                Pay First Installment
                                            </MudButton>
                                        </MudCard>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem xs="12" Class="mt-6">
                            <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                                <MudText>Current Payment Plan: @GetPaymentPlanDisplay(debtorRecord.PaymentPlan)</MudText>
                                @if (debtorRecord.PaymentPlan == PayPlan.SecondInstalment)
                                {
                                    <div class="mt-2">
                                        <MudText>Next Payment Due: ₦@((debtorRecord.OutstandingAmount).ToString("N2"))</MudText>
                                        <MudText>Due Date: @debtorRecord.DueDate.ToShortDateString()</MudText>
                                        <MudButton Color="Color.Primary" Variant="Variant.Filled" 
                                                 Class="mt-4" OnClick="() => InitiatePayment(debtorRecord.OutstandingAmount, PayPlan.SecondInstalment)">
                                            Make Payment
                                        </MudButton>
                                    </div>
                                }
                            </MudAlert>
                        </MudItem>
                    }
                }
                else
                {
                    <MudItem xs="12" Class="mt-6">
                        <MudAlert Severity="Severity.Success" Variant="Variant.Filled">
                            All payments have been completed. Thank you!
                        </MudAlert>
                    </MudItem>
                }

                <!-- Payment History -->
                @if (paymentHistory.Any())
                {
                    <MudItem xs="12" Class="mt-6">
                        <MudText Typo="Typo.h6" Class="mb-4">Payment History</MudText>
                        <MudTable Items="@paymentHistory" Hover="true" Striped="true">
                            <HeaderContent>
                                <MudTh>Date</MudTh>
                                <MudTh>Reference</MudTh>
                                <MudTh>Amount</MudTh>
                                <MudTh>Status</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.CreatedDate.ToShortDateString()</MudTd>
                                <MudTd>@context.ReferenceNo</MudTd>
                                <MudTd>₦@context.Amount.ToString("N2")</MudTd>
                                <MudTd>
                                    <MudChip Color="@(context.isSuccessful ? Color.Success : Color.Error)">
                                        @(context.isSuccessful ? "Successful" : "Pending")
                                    </MudChip>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                }
            </MudCardContent>
        }
    </MudCard>

    <!-- Remita Form -->
    <form id="remitaForm" action="@remitaBaseUrl" method="POST" style="display:none;">
        <input type="hidden" name="merchantId" id="merchantId" value="@remitaModel.merchantId" />
        <input type="hidden" name="serviceTypeId" id="serviceTypeId" value="@remitaModel.serviceTypeId" />
        <input type="hidden" name="hash" id="hash" value="@remitaModel.hash" />
        <input type="hidden" name="orderId" id="orderId" value="@remitaModel.orderId" />
        <input type="hidden" name="amt" id="amt" value="@remitaModel.amount" />
        <input type="hidden" name="responseurl" id="responseurl" value="@remitaModel.responseurl" />
        <input type="hidden" name="payerName" id="payerName" value="@remitaModel.payerName" />
        <input type="hidden" name="payerEmail" id="payerEmail" value="@remitaModel.payerEmail" />
        <input type="hidden" name="payerPhone" id="payerPhone" value="@remitaModel.payerPhone" />
    </form>
</MudContainer> 

  @code {
    public class PaymentModel
    {
        public string payerName { get; set; } = string.Empty;
        public string payerEmail { get; set; } = string.Empty;
        public string payerPhone { get; set; } = string.Empty;
        public decimal amount { get; set; }
        public string paymentType { get; set; } = string.Empty;
        public string merchantId { get; set; } = string.Empty;
        public string serviceTypeId { get; set; } = string.Empty;
        public string orderId { get; set; } = string.Empty;
        public string responseurl { get; set; } = string.Empty;
        public string apiKey { get; set; } = string.Empty;
        public string hash { get; set; } = string.Empty;
    }

    private ApplicantDebtorListDto debtorRecord;
    private ApplicationFormDto currentApplicationForm;
    private List<ApplicantPaymentLogDto> paymentHistory = new();
    private bool isLoading = true;
    private PaymentModel remitaModel = new();
    private const string remitaBaseUrl = "https://login.remita.net/remita/ecomm/init.reg";

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentData();
    }

    private async Task LoadStudentData()
    {
        try
        {
            isLoading = true;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("User not found", Severity.Error);
                return;
            }

            // Load application form
            currentApplicationForm = await applicationForm.GetApplicationFormByUserId(userId);
            if (currentApplicationForm == null || currentApplicationForm.Id <= 0)
            {
                Snackbar.Add("Please complete your application registration first", Severity.Warning);
                NavigationManager.NavigateTo("/applicant/Dashboard", forceLoad: true);
                return;
            }

            // Load debtor record
            var debtorRecords = await Repository.GetByApplicationFormIdAsync(currentApplicationForm.Id);
            debtorRecord = debtorRecords.FirstOrDefault();
            if (debtorRecord == null)
            {
                Snackbar.Add("No payment information found", Severity.Info);
                return;
            }

            // Load payment history
              @*   *@
        } 
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading payment information: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error in LoadStudentData: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetPaymentPlanDisplay(PayPlan plan)
    {
        return plan switch
        {
            PayPlan.FirstInstalment => "First Installment",
            PayPlan.SecondInstalment => "Second Installment",
            PayPlan.SecondThirdInstalment => "Full Payment",
            PayPlan.NotPaid => "Not Paid",
            _ => plan.ToString()
        };
    }

    private async Task InitiatePayment(decimal amount, PayPlan selectedPlan)
    {
        try
        {
            if (currentApplicationForm == null || !currentApplicationForm.ProgramSetupId.HasValue)
            {
                Snackbar.Add("Invalid application form", Severity.Error);
                return;
            }

            // Get user information
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var userInformation = await UserManager.FindByIdAsync(userId);

            if (userInformation == null)
            {
                Snackbar.Add("User information not found", Severity.Error);
                return;
            }

            // Get payment details
            var paymentDetails = await payDetailsRepository.GetPayDetailsByProgramSetupId(
                currentApplicationForm.ProgramSetupId.Value);
            var applicablePayDetail = paymentDetails?.FirstOrDefault();

            if (applicablePayDetail == null)
            {
                Snackbar.Add("Payment configuration not found", Severity.Error);
                return;
            }

            // Generate payment reference
            string formRefNo = currentApplicationForm.FormRefNo ?? "ACU/APC";
            string serialNumber = GenerateSerialNumber();
            string orderId = $"{formRefNo}/{selectedPlan}/{serialNumber}";

            // Setup Remita model
            remitaModel = new PaymentModel
            {
                payerName = $"{userInformation.Firstname} {userInformation.Surname}",
                payerEmail = userInformation.Email,
                payerPhone = userInformation.PhoneNumber,
                merchantId = "2268484533",
                serviceTypeId = "2267186704",
                amount = amount,
                orderId = orderId,
                responseurl = $"{NavigationManager.BaseUri}Payment/ProcessTransactionLogReceipt8",
                apiKey = "018543"
            };

            // Generate hash
            string hashString = remitaModel.merchantId + 
                              remitaModel.serviceTypeId + 
                              remitaModel.orderId + 
                              remitaModel.amount.ToString() + 
                              remitaModel.responseurl + 
                              remitaModel.apiKey;

            using var sha512 = System.Security.Cryptography.SHA512.Create();
            var hashedBytes = sha512.ComputeHash(System.Text.Encoding.UTF8.GetBytes(hashString));
            remitaModel.hash = BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();

            // Log payment attempt
            var paymentLog = new ApplicantPaymentLogDto
            {
                ReferenceNo = remitaModel.orderId,
                Amount = remitaModel.amount,
                email = userInformation.Email,
                client_name = remitaModel.payerName,
                ApplicantPayDetailsId = applicablePayDetail.Id,
                ApplicantPayCategoryId = applicablePayDetail.ApplicantPayCategoryId,
                RRRRNo = "",
                isSuccessful = false,
                UserId = userId,
                Comments = $"Payment Portal Payment - {selectedPlan}"
            };

            // Save payment log
            await paymentRepository.CreateApplicantPayment(paymentLog);

            // Force UI update
            StateHasChanged();

            // Submit form with delay to ensure UI is updated
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("submitForm", "remitaForm");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Payment initiation error: {ex}");
            Snackbar.Add($"Error initiating payment: {ex.Message}", Severity.Error);
        }
    }

    private string GenerateSerialNumber()
    {
        return new Random().Next(10000000, 99999999).ToString("D8");
    }
}  


<script>
    window.submitForm = function (formId) {
        console.log('Submitting form:', formId);
        try {
            const form = document.getElementById(formId);
            if (form) {
                // Log form values for debugging
                console.log('Form found, logging values:');
                const formData = new FormData(form);
                for (let pair of formData.entries()) {
                    console.log(pair[0] + ': ' + pair[1]);
                }
                console.log('Submitting form to:', form.action);
                form.submit();
            } else {
                console.error('Form not found:', formId);
            }
        } catch (error) {
            console.error('Error submitting form:', error);
        }
    }
</script> 