 @page "/applicant/nok"
@layout ACUnifiedLayout
@inject IStateRepository StatesRepos
@using ACUnified.Business.Repository.IRepository
@using ACUnified.Data.DTOs
@using ACUnified.Portal.Pages.Applicant.Validator
@using ACUnified.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject ISnackbar snackBar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject INextOfKinRepository NextOfKinRepository
@inject ILGARepository LGARepository
@inject ICountryRepository CountryRepository
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILGARepository LGARepository
@inject IApplicationFormRepository applicationForm
@attribute [Authorize(Roles = "FreshApplicantDashboard")]
@* <h4><MudIcon Icon="@Icons.Material.Filled.School" /> Personal Details</h4> *@
 <div class="ml-5 py-4"> 
     

<!--timeline -->
 <MudTimeline TimelineOrientation=TimelineOrientation.Horizontal TimelinePosition=TimelinePosition.Start Reverse=false Class="py-5">
    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
        <ItemOpposite>
            <MudText Color="Color.Success">Biodata</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
        <ItemOpposite>
            <MudText Color="Color.Success">Other Details</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
        <ItemOpposite>
            <MudText Color="Color.Success">Next of kin</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Warning" Variant="Variant.Filled">
        <ItemOpposite>
            <MudText Color="Color.Error">Credentials</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Warning" Variant="Variant.Filled">
        <ItemOpposite>
            <MudText Color="Color.Error">Reference Info</MudText>
        </ItemOpposite>
    </MudTimelineItem>
</MudTimeline>
<!-- end timeline -->
    <MudForm Model="@currentNextOfKin" @ref="@NextOfKinform"  Validation="@(nextofkinValidator.ValidateValue)" ValidationDelay="0" >
        <!--row 1-->
        <MudGrid Class="mr-5">
            <MudItem xs="12" sm="6" md="4">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="currentNextOfKin.FirstName" For="@(()=>currentNextOfKin.FirstName)" T="string" Label="Firstname" Immediate="true"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="currentNextOfKin.LastName" For="@(()=>currentNextOfKin.LastName)" Label="LastName" Immediate="true"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">

                <MudTextField T="string" Label="Othernames" @bind-Value="currentNextOfKin.OtherName" For="@(()=>currentNextOfKin.OtherName)" Variant="Variant.Outlined" Immediate="true"></MudTextField>
            </MudItem>


        </MudGrid>
        <!-- end row 1-->
        <!-- row 2-->
        <MudGrid Class="mr-2">
<MudItem xs="12" sm="6" md="4">
                <MudTextField Variant="Variant.Outlined" T="string" @bind-Value="currentNextOfKin.Email" For="@(()=>currentNextOfKin.Email)" Label="Email Address" Immediate="true"></MudTextField>
            </MudItem>
               <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="currentNextOfKin.MobileNumber" For="@(() => currentNextOfKin.MobileNumber)" Variant="Variant.Outlined" T="string" Label="Phone Number" Immediate="true"></MudTextField>
            </MudItem>
           <MudItem xs="12" sm="6" md="4"> 
                <MudSelect Dense T="string" For="@(() => currentNextOfKin.Gender)" @bind-Value="currentNextOfKin.Gender" Label="Gender" Variant="Variant.Outlined" Immediate="true">
                    <MudSelectItem Value="@("Male")" />
                    <MudSelectItem Value="@("Female")" />
                </MudSelect>

            </MudItem>
        </MudGrid>
        <MudGrid Class="mr-2">
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="currentNextOfKin.Occupation" For="@(() => currentNextOfKin.Occupation)" Variant="Variant.Outlined" T="string" Label="Occupation" Immediate="true"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4"> 
                <MudSelect Dense T="string" For="@(() => currentNextOfKin.Relationship)" @bind-Value="currentNextOfKin.Relationship" Label="Relationship" Variant="Variant.Outlined" Immediate="true">
                    <MudSelectItem Value="@("Parent")" />
                    <MudSelectItem Value="@("Siblings")" />
                    <MudSelectItem Value="@("Guardian")" />
                    <MudSelectItem Value="@("Spouse")" />
                </MudSelect>

            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField T="string" @bind-Value="currentNextOfKin.Address" For="@(() => currentNextOfKin.Address)" Variant="Variant.Outlined" Label="Residential Address" Immediate="true"></MudTextField>
            </MudItem>
        </MudGrid>
        <MudGrid>
                <MudItem xs="12" sm="6" md="4">
        <MudSelect For="@(()=>currentNextOfKin.LGA)" Dense T="string" @bind-Value="currentNextOfKin.LGA" Label="Local Government" Variant="Variant.Outlined" Immediate="true">
           @foreach( var lga in LGAs)  {
                 <MudSelectItem Value=lga.Name />
           } 
        </MudSelect>
</MudItem>
        </MudGrid>
        <MudGrid>
               <div class="d-flex align-center justify-space-between ml-auto">
                <MudButton OnClick="@HandleSave" Disabled="@(@currentApplicationForm.ApplicantStage >= @ACUnified.Data.Enum.ApplicationStage.Stage3)" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto mr-3">Previous</MudButton>
                <MudButton OnClick="@OnValidSubmit" Disabled="@(@currentApplicationForm.ApplicantStage >= @ACUnified.Data.Enum.ApplicationStage.Stage3)" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save & Continue</MudButton>
               </div>
        </MudGrid>
    </MudForm>
</div>
@code {

    NextOfKinDto currentNextOfKin = new NextOfKinDto();

    MudForm NextOfKinform;
      public LGADto[] LGAs;
    ApplicationFormDto currentApplicationForm = new ApplicationFormDto();
    NextOfKinValidator nextofkinValidator = new NextOfKinValidator();
    public bool _loading { get; set; }
    protected override async Task OnInitializedAsync(){

           LGAs=(await LGARepository.GetAllLGA()).ToArray();

        _loading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        //var cuser=UserManager.GetUserName(User);


        if (userId != null)
        {

            currentApplicationForm = await applicationForm.GetApplicationFormByUserId(userId);
            if (currentApplicationForm != null)
            {

                var tcurrentNextOfKin = await NextOfKinRepository.GetNextOfKin(userId);
                if (tcurrentNextOfKin != null)
                {
                    currentNextOfKin = tcurrentNextOfKin;
                    
                }

            }
            else
            {
                snackBar.Add("Please pay mandatory fees ", Severity.Error, configure =>
                {
                    configure.CloseAfterNavigation = false;
                });
                Navigation.NavigateTo("/applicant/Dashboard", forceLoad: true);
            }
        }
        else
        {
            snackBar.Add("Error ", Severity.Error);
            Navigation.NavigateTo("/applicant/Dashboard",forceLoad:true);
        }
        _loading = false;
    }

   
  private async Task OnValidSubmit()
{
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    await NextOfKinform.Validate();
    if (NextOfKinform.IsValid)
    {
        currentNextOfKin.UserId = userId;
        var updatedNextOfKin = await NextOfKinRepository.UpdateNextOfKin(currentNextOfKin);
        if (updatedNextOfKin != null)
        {
            var currentApplicationForm = await applicationForm.GetApplicationFormByUserId(userId);
            currentApplicationForm.NextOfKinId = updatedNextOfKin.Id;
            await applicationForm.UpdateApplicationForm(currentApplicationForm);

            snackBar.Add("Records have been saved successfully", Severity.Success);
            Navigation.NavigateTo("/applicant/academicqualification");
        }
        else
        {
            snackBar.Add("Error: Failed to save records", Severity.Error);
        }
    }
    else
    {
        snackBar.Add("Error: Please ensure all fields are properly filled", Severity.Error);
    }
}

  private async Task HandleSave()
{
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    await NextOfKinform.Validate();
    if (NextOfKinform.IsValid)
    {
        currentNextOfKin.UserId = userId;
        var updatedNextOfKin = await NextOfKinRepository.UpdateNextOfKin(currentNextOfKin);
        if (updatedNextOfKin != null)
        {
            var currentApplicationForm = await applicationForm.GetApplicationFormByUserId(userId);
            currentApplicationForm.NextOfKinId = updatedNextOfKin.Id;
            await applicationForm.UpdateApplicationForm(currentApplicationForm);

            snackBar.Add("Records have been saved successfully", Severity.Success);
            Navigation.NavigateTo("/applicant/otherdetails");
        }
        else
        {
            snackBar.Add("Error: Failed to save records", Severity.Error);
        }
    }
    else
    {
        snackBar.Add("Error: Please ensure all fields are properly filled", Severity.Error);
    }
}
}
