@* @page "/landing"
@using FluentValidation
@layout ACUnifiedLayout
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Identity
@using ACUnified.Data.Models
@using ACUnified.Data.Models
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider

    <PageTitle>Ajayi Crowther University::Portal</PageTitle>
    <AuthorizeView>
    <Authorized>
          <MudGrid>
        @if (HasRole("FreshApplicantDashboard")){
           <mudpaper>
                <MudText>

                    Welcome to Ajayi Crowther University, Oyo School Application Portal.

                    Applications are invited from suitably qualified candidates for 2023/2024 admissions.

                    Cost of Application Form is N15,000.00 (Fifteen thusand naira only).

                    Follow the links to view available programmes and complete application form.

                    Closing Date for all applicatons is on Wednesday 13th Octover, 2024.

                    Support lines:
                    email: info@acu.edu.ng
                    calls: 08123456789
                </MudText>
            </mudpaper>
      }
        @if (HasRole("StudentDashboard"))
        {
             <mudpaper>
                <MudText>
                    Student
                </MudText>
             </mudpaper>
      }
            @if (HasRole("Bursary"))
        {
            <mudpaper>
                <MudText>
                    Busary
                </MudText>
            </mudpaper>
        }
    </MudGrid>
    

    </Authorized>
    <NotAuthorized>


    </NotAuthorized>
</AuthorizeView>
<MudContainer>
   



    <!-- Overlay with Progress Bar -->
    @if (IsOverlayVisible)
    {
        <MudOverlay Visible="true" />
        <div class="progress-overlay">
            <MudProgressCircular Indeterminate="true" Size=Size.Medium Color="Color.Primary" />
        </div>
    }

  
</MudContainer>






@code {
    [Inject] ISnackbar Snackbar { get; set; }
    private bool IsOverlayVisible = false;
    MudForm form;
    public bool _loading { get; set; }

    ApplicantRegistrationModelFluentValidator orderValidator = new ApplicantRegistrationModelFluentValidator();


    ApplicantRegistrationModel model = new ApplicantRegistrationModel();
    List<ApplicationPaymentSetup> paymentsetup = new List<ApplicationPaymentSetup>();

    private string GetIconForCategory(string category)
    {
        return category switch
        {
            "Undergraduate" => Icons.Material.Filled.School,
            "Postgraduate" => Icons.Material.Filled.Book,
            "JUPEB" => Icons.Material.Filled.LibraryBooks,
            "Part-Time" => Icons.Material.Filled.LaptopChromebook,
            "Sandwich" => Icons.Material.Filled.Science,
            "MBA" => Icons.Material.Filled.BusinessCenter,
            _ => Icons.Material.Filled.School // default icon
        };
    }

    public class ApplicantRegistrationModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }

    }

    public class ApplicationPaymentSetup
    {
        public string Name { get; set; }
        public decimal Amount { get; set; }
        public ApplicationPaymentSetup(string Name, decimal Amount)
        {
            this.Name = Name;
            this.Amount = Amount;
        }
    }


    protected override async Task OnInitializedAsync()
    {


        paymentsetup = new List<ApplicationPaymentSetup>()
        {
            new ApplicationPaymentSetup("Undergraduate", 5000m),
            new ApplicationPaymentSetup("Postgraduate", 6000m),
            new ApplicationPaymentSetup("JUPEB", 6000m),
            new ApplicationPaymentSetup("Part-Time", 6000m),
            new ApplicationPaymentSetup("Sandwich", 6000m),
            new ApplicationPaymentSetup("MBA", 6000m),
        };
        //var user = await UserManager.GetUserAsync(Context.User);
        //var customFieldValue = user?.;
        if (HasRole("FreshApplicantDashboard"))
        {
            Navigation.NavigateTo("/Applicant/Dashboard",true);
        }
        if (HasRole("StudentDashboard"))
        {
            Navigation.NavigateTo("/Student/Dashboard", true);
        }
        if (HasRole("Bursary"))
        {
            Navigation.NavigateTo("/busary/Dashboard", true);
        }
        
    }


    private async Task Submit()
    {
        
        IsOverlayVisible = true;

        await form.Validate();
        await Task.Delay(3000);
        if (form.IsValid)
        {
            Snackbar.Add("Submitted!", MudBlazor.Severity.Success);
            Navigation.NavigateTo("/");  // Redirects to the home page
        }
        IsOverlayVisible = false;
    }

    void NavigateToPaymentPage(string name, decimal amount)
    {
        var url = $"/PayGate/{name}";
        Navigation.NavigateTo(url);
    }

    private  bool HasRole(string role)
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;

        return user.Identity.IsAuthenticated && user.IsInRole(role);
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="ApplicantRegistrationModel"></typeparam>
    public class ApplicantRegistrationModelFluentValidator : AbstractValidator<ApplicantRegistrationModel>
    {
        public ApplicantRegistrationModelFluentValidator()
        {
            RuleFor(x => x.FirstName)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.LastName)
               .NotEmpty()
               .Length(1, 100);

            RuleFor(x => x.PhoneNumber)
              .NotEmpty()
              .Length(1, 100);

            RuleFor(x => x.Email)
        .Cascade(CascadeMode.Stop)
        .NotEmpty()
        .EmailAddress()
        .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));





        }

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ApplicantRegistrationModel>.CreateWithOptions((ApplicantRegistrationModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

     

    }
}
  *@
